{"version":3,"sources":["components/Login/Login.jsx","containers/LoginContainer.tsx"],"names":["loginFormValidationSchema","Yup","loginEmailInput","email","required","loginPwdInput","LoginForm","props","useState","pwdInputType","setPwdInputType","isSubmitting","toggleIsSubmitting","pwdInputRef","React","createRef","initialValues","rememberMe","captcha","validationSchema","onSubmit","values","authorize","then","catch","message","setGlobalMessage","isSuccess","formik","handleSubmit","action","method","className","htmlFor","onChange","handleChange","type","id","errors","to","ref","onClick","toggler","current","inputType","captchaURL","src","alt","InputText","width","isDisabled","Button","inner","disabled","isFetching","fetchingMessage","Login","reactToIncorrectAuthData","isAuthDataIncorrect","setTimeout","toggleIsAuthDataIncorrect","isAuth","connector","connect","state","auth","setCaptchaURL","compose","withGlobalMessage","useEffect"],"mappings":"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","file":"static/js/3.91ab5fa5.chunk.js","sourcesContent":["import './Login.scss';\nimport Button from \"../SharedComponents/Button\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport React, {useState} from \"react\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from \"../SharedComponents/InputText/InputText\";\n\n\nconst loginFormValidationSchema = Yup.object({\n    loginEmailInput: Yup.string().email('Invalid email address').required('Required'),\n    loginPwdInput: Yup.string().required('Required')\n});\nconst togglePwdVisibilityOnClick = (ref, toggler) => {\n    if (ref.current.type === 'password') {\n        ref.current.type = 'text';\n        toggler('text')\n    } else {\n        ref.current.type = 'password';\n        toggler('password')\n    }\n}\nconst choosePwdVisibilityIcon = (inputType) => {\n    if(inputType === 'password'){\n        return <i className=\"fas fa-eye-slash login-form__pwd-toggle-visibility-icon\" />\n    }\n    if(inputType === 'text'){\n        return  <i className=\"fas fa-eye login-form__pwd-toggle-visibility-icon\" />\n    }\n}\nconst submitBtn = (isDisabled) => <Button inner=\"Submit\" type=\"submit\" disabled={isDisabled} isFetching={isDisabled} fetchingMessage={'Submitting...'}/>;\n\n\nconst Login = (props) => {\n    const reactToIncorrectAuthData = props.isAuthDataIncorrect ? 'login__box--shaking login__box--red' : '';\n    if(props.isAuthDataIncorrect){\n        setTimeout(() => {props.toggleIsAuthDataIncorrect(false)}, 1600)\n    }\n    if(props.isAuth){\n        return <Redirect to={'/profile'}/>;\n    }\n    return(\n        <div className=\"login\">\n            <div className={`login__box ${ reactToIncorrectAuthData }`} >\n                <h1 className=\"login__title\">Sign In</h1>\n                <LoginForm {...props}/>\n            </div>\n        </div>\n    )\n}\n\nconst LoginForm = (props) => {\n    let [pwdInputType, setPwdInputType] = useState('password');\n    let [isSubmitting, toggleIsSubmitting] = useState(false);\n    const pwdInputRef = React.createRef();\n    return (\n        <Formik\n            initialValues={{\n                loginEmailInput: '',\n                loginPwdInput: '',\n                rememberMe: false,\n                captcha: ''\n            }}\n            validationSchema={loginFormValidationSchema}\n            onSubmit={values => {\n                toggleIsSubmitting(true);\n                props.authorize(values.loginEmailInput, values.loginPwdInput, values.rememberMe, values.captcha)\n                    .then(() => {\n                        toggleIsSubmitting(false);\n                    })\n                    .catch((message) => {\n                        toggleIsSubmitting(false);\n                        props.setGlobalMessage({message: message[0],isSuccess: false})\n                    })\n            }}\n        >\n            {formik => (\n                <form  onSubmit={formik.handleSubmit} action=\"#\" method=\"post\" className=\"login__form login-form\">\n                    <label htmlFor=\"loginEmailInput\" className=\"login-form__email-label\">Email:</label>\n                    <div className=\"login-form__email-box\">\n                        <i className=\"fas fa-user\" />\n                        <input onChange={formik.handleChange} type=\"email\" id=\"loginEmailInput\" className=\"login-form__email\"/>\n                    </div>\n                    <span className=\"login-form__validation-error\">{formik.errors.loginEmailInput}</span>\n                    <div className=\"login-form__pwd-label-box\">\n                        <label htmlFor=\"loginPwdInput\" className=\"login-form__pwd-label\">Password:</label>\n                        <NavLink to='/password_reset' className=\"login-form__forget-pwd\">Forgot password?</NavLink>\n                    </div>\n                    <div className=\"login-form__pwd-box\">\n                        <i className=\"fas fa-lock login-form__pwd-box-icon\" />\n                        <input onChange={formik.handleChange} type=\"password\" id=\"loginPwdInput\" ref={pwdInputRef} className=\"login-form__pwd\"/>\n                        <label onClick={() => togglePwdVisibilityOnClick(pwdInputRef, setPwdInputType)} htmlFor=\"login-toggle-visibility\" className=\"login-form__pwd-toggle-visibility-label\">\n                            {choosePwdVisibilityIcon(pwdInputType)}\n                        </label>\n                        <input type=\"checkbox\"  id=\"login-toggle-visibility\" className=\"login-form__pwd-toggle-visibility\"/>\n                    </div>\n                    <span className=\"login-form__validation-error\">{formik.errors.loginPwdInput}</span>\n                    {\n                        props.captchaURL &&\n                            <>\n                                <img src={props.captchaURL} alt={'Captcha text'} className=\"login-form__captcha-img\"/>\n                                <InputText id={'captcha'}\n                                           onChange={formik.handleChange}\n                                           width={'100%'}\n                                />\n                            </>\n                    }\n                    <div className=\"login-form__controllers\">\n                        <input onChange={formik.handleChange} type=\"checkbox\" id=\"rememberMe\" className=\"login-form__remember-me\"/>\n                        <label htmlFor=\"rememberMe\" className=\"login-form__remember-me-label\">Remember Me</label>\n                        <div className=\"login-form__submit\">\n                            {submitBtn(isSubmitting)}\n                        </div>\n                    </div>\n                </form>\n            )}\n        </Formik>\n    )\n}\n\nexport default Login;","import {connect, ConnectedProps} from \"react-redux\";\nimport {authorize, setCaptchaURL, toggleIsAuthDataIncorrect} from \"../reducers/auth\";\nimport Login from \"../components/Login/Login\";\nimport {setGlobalMessage} from \"../reducers/app\";\nimport {compose} from \"redux\";\nimport {withGlobalMessage} from \"../hoc/withGlobalMessage\";\nimport {FC, useEffect} from \"react\";\nimport {RootState} from \"../redux/reduxStore\";\n\nconst LoginContainer: FC<LoginPropsType> = (props) => {\n    useEffect(() => {\n        return () => {\n            props.setCaptchaURL('');\n        }\n    }, [props.setCaptchaURL])\n\n    return(\n        <Login {...props} />\n    )\n}\nconst mapStateToProps = (state: RootState) => ({\n    isAuth: state.auth.isAuth,\n    isAuthDataIncorrect: state.auth.isAuthDataIncorrect,\n    captchaURL: state.auth.captchaURL\n})\nconst connector = connect(mapStateToProps, { authorize, toggleIsAuthDataIncorrect, setCaptchaURL, setGlobalMessage });\ntype LoginPropsType = ConnectedProps<typeof connector>;\n\nexport default compose(\n    connector,\n    withGlobalMessage\n)(LoginContainer)"],"sourceRoot":""}