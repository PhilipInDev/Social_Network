{"version":3,"sources":["reducers/app.ts","reducers/findFriends.ts","reducers/auth.ts","reducers/rightSideBar.js","reducers/friendsList.js","redux/reduxStore.ts","api/api.ts","reportWebVitals.js","components/SharedComponents/sharedFunc.js","components/Nav/Nav.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageInput/MessageInput.jsx","containers/MessageInputContainer.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/Dialogs.jsx","components/News/News.jsx","components/Music/Music.jsx","components/RightSideBar/FriendItem/FriendItem.jsx","components/RightSideBar/RightSideBar.jsx","assets/images/defaultAvatar.png","components/FindFriends/UserItem/UserItem.tsx","components/FindFriends/SearchFilters/SearchFilters.jsx","components/FindFriends/ShowMoreBtn/ShowMoreBtn.jsx","components/SharedComponents/Pagination/Pagination.jsx","components/FindFriends/SearchInput/SearchInput.jsx","components/FindFriends/FindFriends.tsx","containers/FindFriendsContainer.tsx","components/SharedComponents/NetworkContact/NetworkContact.jsx","assets/images/currDefProfileBg.png","components/Profile/ProfileHeader/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileHeader/ProfileHeader.tsx","components/Profile/ProfileIntro/IntroItem/IntroItem.jsx","components/Profile/ProfileIntro/ProfileIntro.jsx","components/Profile/ProfilePosts/Post/Post.jsx","components/Profile/ProfilePosts/ProfilePosts.jsx","containers/ProfilePostsContainer.jsx","components/SharedComponents/Preloader/Preloader.jsx","components/Profile/Profile.tsx","containers/ProfileContainer.tsx","components/Header/SearchPanel/SearchPanel.jsx","components/Header/UserLoginItem/UserLoginItem.jsx","components/Header/Header.jsx","containers/HeaderContainer.tsx","components/SharedComponents/InputCheckbox/InputCheckbox.jsx","components/SharedComponents/Textarea/Textarea.jsx","components/Settings/ProfileSettings/ProfileSettings.jsx","components/Settings/Settings.jsx","containers/SettingsContainer.tsx","components/SharedComponents/GlobalMessage/GlobalMessage.jsx","App.tsx","hoc/withSuspense.jsx","index.js","components/SharedComponents/Button.tsx","reducers/profile.ts","hoc/withGlobalMessage.jsx","reducers/dialogs.js","components/SharedComponents/InputText/InputText.jsx"],"names":["appReducer","createSlice","name","initialState","initialized","globalMessage","reducers","toggleInitialized","state","action","payload","setGlobalMessage","message","isSuccess","push","removeGlobalMessage","actions","useAppState","useAppSelector","app","shallowEqual","useAppReducerDispatch","dispatch","useAppDispatch","isInitialized","SET_USERS","TOGGLE_FRIEND","TOGGLE_IS_FETCHING","TOGGLE_IS_ADDING_FRIEND","TOGGLE_WHICH_FRIEND_IS_ADDING","SET_SEARCH_CONDITION","SET_USERS_COUNT","SET_TOTAL_COUNT","SET_CURRENT_PAGE","users","totalCount","usersCount","currentPage","searchConditions","term","isOnlyFriends","isFetching","isAddingFriend","whichFriendIsAdding","setSearchConditions","type","toggleFriend","id","isFriend","setUsers","setUsersCount","setTotalCount","setCurrentPage","currPage","toggleIsFetching","toggleAddingFriend","toggleWhichFriendIsAdding","userId","getUsers","pageNum","a","UsersAPI","data","items","getAdditionalUsers","usersAddTo","postAddFriend","FollowAPI","resultCode","ResultCodes","Success","deleteFriend","findFriendsReducer","usersMapped","map","user","followed","filter","SET_ME","SET_AUTH_USER_PROFILE","TOGGLE_AUTH","TOGGLE_IS_AUTH_DATA_INCORRECT","TOGGLE_IS_AUTHORIZING","SET_AUTH_USER_STATUS","SET_CAPTCHA_URL","email","login","captchaURL","isAuth","isAuthorizing","isAuthDataIncorrect","authorizedUserProfile","authUserStatus","setMe","setAuthUserProfile","profile","toggleAuth","toggleIsAuthDataIncorrect","isIncorrect","toggleIsAuthorizing","setCaptchaURL","putNewUserPhotoAndRefreshProfileState","formData","authUserId","ProfileAPI","putUsersPhoto","then","response","getUserProfileData","profileData","getAuthUserDataAndGetSetAuthUserProfileData","AuthAPI","getAuthUserData","getUserStatus","status","authorize","password","rememberMe","captcha","Promise","resolve","messages","CaptchaRequired","getCaptchaURL","reject","unAuthorize","refreshAuthUserProfileData","putUserProfile","authUserData","authUserProfileData","SecurityAPI","getCaptcha","url","authReducer","friendsList","avatar","isOnline","rightSideBarReducer","friendsId","friendsListReducer","reducersCombined","combineReducers","dialogs","dialogsReducer","profileReducer","rightSideBar","findFriends","auth","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","useDispatch","useSelector","instanceAxios","axios","create","withCredentials","headers","baseURL","requestCommonThen","request","catch","error","page","friend","nameToSearch","get","put","putUserStatus","post","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","useOutsideAlerter","ref","callback","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","Nav","props","navBarRef","React","createRef","useState","isNavBarOpened","toggleNavBarOpening","className","onClick","to","DialogItem","src","avatarLink","messageName","Message","messageDefaultClass","myMessageModifier","owner","time","MessageInput","textAreaEl","cols","rows","placeholder","value","messageInputValue","onChange","textAreaOnChange","sendMessage","Button","textareaEl","inner","MessageInputContainer","connect","date","Date","sendMessageActionCreator","toLocaleTimeString","hour","minute","updateNewMessageTextActionCreator","mapStateToPropsForRedirect","withAuthRedirect","Component","messagesElements","el","dialogElements","dialogItems","News","Music","FriendItem","alt","RightSideBar","UserItem","toggleFriendBtn","useRef","changeButtonInner","photos","small","defaultAvatar","disabled","some","SearchFilters","setQueryParams","initialValues","onSubmit","values","formik","e","handleChange","handleSubmit","ShowMoreBtn","space","mod","nanoid","Pagination","itemsCount","getItems","numOfLinks","pagesCount","Math","ceil","linksCount","startLinkNum","setStartLinkNum","startLinkNumVar","linkSize","length","getLink","changeCurrentPageOnClick","window","scrollTo","watchAdditionalLinksOnClick","sign","arrowOnClick","startNumAfterSpaceClick","linksArr","additionalLinks","start","finish","additionalLinksForLastPage","getStartNumAndFinishNumByCurrentPage","i","mapPageLinks","SearchInput","searchTerm","setOutput","searchFieldOnSubmit","timeout","setTimeout","clearTimeout","termFindFriends","validationSchema","Yup","max","currentTarget","FindFriends","history","useHistory","location","paramType","REG_EX","locationSliced","search","slice","includes","updParams","replace","pathname","item","yOffset","scrollY","connector","compose","withGlobalMessage","useLocation","paramsParsed","qs","parse","ignoreQueryPrefix","urlPageNum","friends","finalTerm","NetworkContact","link","icon","startsWith","href","ProfileStatus","isStatusEditing","toggleStatusEditing","localStatus","setLocalStatus","statusInputBoxRef","submitStatusChanges","userStatus","editStatusOnClick","statusEditable","autoFocus","onKeyDown","key","onDoubleClick","title","ProfileHeader","contactItems","c","contacts","backgroundImg","background","defBgImg","avatarImg","defAvaImg","IntroItem","text","ProfileIntro","fullName","lookingForAJob","lookingForAJobDesc","aboutMe","Post","profileLink","profileImage","likesCount","commentsCount","ProfilePosts","fulledPosts","posts","postsInputValue","addPost","ProfilePostsContainer","Preloader","Profile","useParams","isGettingProfileData","large","authUserProfile","lookingForAJobDescription","userProfile","initUserProfileWithDataInMemory","initUserProfileWithoutDataInMemory","JSON","stringify","SearchPanel","UserLoginItem","isOptionMenuOpened","toggleOptionMenu","optionsMenuRef","optionsMenu","defAvatar","Header","controllersForAuthUser","HeaderContainer","this","InputCheckbox","label","isChecked","htmlFor","defaultChecked","Textarea","minHeight","maxHeight","width","defaultValue","ProfileSettingsForm","isLookingForAJob","setIsLookingForAJob","setIsFetching","contactsValidationMapped","contactsKeys","Object","keys","nullable","profileSettingsFormValidationSchema","min","required","trim","github","vk","facebook","instagram","twitter","website","youtube","mainLink","lodash","isEqual","InputText","errors","aboutMeInput","contact","charAt","toUpperCase","maxLength","minLength","fetchingMessage","ProfileSettings","photo","file","setFile","fileURL","setFileURL","imgForPreview","files","URL","createObjectURL","FormData","append","Settings","path","render","GlobalMessage","removeMessageFunc","LoginContainer","lazy","AppContainer","globalMessageArray","profileContainerComponent","exact","from","component","Suspense","fallback","SocialNetworkApp","StrictMode","rerenderEntireTree","ReactDOM","getElementById","subscribe","undefined","setUserProfile","toggleIsGettingProfileData","setUserStatus","all","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","height"],"mappings":"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","file":"static/js/main.6831e156.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {GlobalMessageType} from \"../types/types\";\nimport {shallowEqual} from \"react-redux\";\nimport {useAppSelector, useAppDispatch} from \"../redux/reduxStore\";\n\n// export const TOGGLE_INITIALIZED = 'TOGGLE_INITIALIZED';\n// export const SET_GLOBAL_MESSAGE = 'SET_GLOBAL_MESSAGE';\n// export const REMOVE_GLOBAL_MESSAGE = 'REMOVE_GLOBAL_MESSAGE';\n\ntype AppInitialStateType = {\n    initialized: boolean\n    globalMessage: Array<GlobalMessageType>\n}\nconst initialState: AppInitialStateType = {\n    initialized: false,\n    globalMessage: []\n}\nconst appReducer = createSlice({\n    name: 'app',\n    initialState,\n    reducers: {\n        toggleInitialized: (state, action: PayloadAction<boolean>) => {\n            state.initialized = action.payload;\n        },\n        setGlobalMessage: (state, action: PayloadAction<GlobalMessageType>) => {\n            const { message, isSuccess } = action.payload;\n            state.globalMessage.push({ message, isSuccess });\n        },\n        removeGlobalMessage: (state) => {\n            state.globalMessage = [];\n        }\n    }\n})\nexport const { toggleInitialized, setGlobalMessage, removeGlobalMessage } = appReducer.actions;\n// const appReducer = (state = initialState, action: ActionTypes): AppInitialStateType => {\n//     switch (action.type) {\n//         case TOGGLE_INITIALIZED:\n//             return{\n//                 ...state,\n//                 initialized: action.initialized\n//             }\n//         case SET_GLOBAL_MESSAGE:\n//             return {\n//                 ...state,\n//                 globalMessage: [...state.globalMessage, {message: action.message,isSuccess: action.isSuccess}]\n//             }\n//         case REMOVE_GLOBAL_MESSAGE:\n//             return{\n//                 ...state,\n//                 globalMessage: []\n//             }\n//         default:\n//             return state;\n//     }\n// }\n\n// type ActionTypes = ToggleInitializedType | SetGlobalMessageType | RemoveGlobalMessageType;\n\n// type ToggleInitializedType = {\n//     type: typeof TOGGLE_INITIALIZED\n//     initialized: boolean\n// }\n// export const toggleInitialized = (isInitialized: boolean): ToggleInitializedType => ({\n//     type: TOGGLE_INITIALIZED,\n//     initialized: isInitialized\n// })\n//\n\n// export const setGlobalMessage = (message: string, isSuccess: boolean): SetGlobalMessageType => ({\n//     type: SET_GLOBAL_MESSAGE,\n//     message,\n//     isSuccess\n// })\n//\n// type RemoveGlobalMessageType = {\n//     type: typeof REMOVE_GLOBAL_MESSAGE\n// }\n// export const removeGlobalMessage = (): RemoveGlobalMessageType => ({\n//     type: REMOVE_GLOBAL_MESSAGE\n// })\nexport const useAppState = () => {\n  return {\n      initialized: useAppSelector(state => state.app.initialized),\n      globalMessage: useAppSelector(state => state.app.globalMessage, shallowEqual)\n  }\n}\nexport const useAppReducerDispatch = () => {\n    const dispatch = useAppDispatch();\n    return {\n        toggleInitialized: (isInitialized: boolean) => dispatch(toggleInitialized(isInitialized)),\n        setGlobalMessage: (message: string, isSuccess: boolean) => dispatch(setGlobalMessage({message, isSuccess})),\n        removeGlobalMessage: () => dispatch(removeGlobalMessage())\n    }\n}\nexport default appReducer.reducer;\n","import {FollowAPI, ResultCodes, UsersAPI} from \"../api/api\";\nimport {setGlobalMessage} from \"./app\";\nimport {AppThunk} from \"../redux/reduxStore\";\nimport {SearchConditionsType, UserItemType, UsersData} from \"../types/types\";\n\nconst SET_USERS = 'findFriends/SET_USERS';\nconst TOGGLE_FRIEND = 'findFriends/TOGGLE_FRIEND';\nconst TOGGLE_IS_FETCHING = 'findFriends/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_ADDING_FRIEND = 'findFriends/TOGGLE_IS_ADDING_FRIEND';\nconst TOGGLE_WHICH_FRIEND_IS_ADDING = 'findFriends/TOGGLE_WHICH_FRIEND_IS_ADDING';\nconst SET_SEARCH_CONDITION = 'findFriends/SET_SEARCH_CONDITION';\n// -- pagination\nconst SET_USERS_COUNT = 'findFriends/SET_USERS_COUNT';\nconst SET_TOTAL_COUNT = 'findFriends/SET_TOTAL_COUNT';\nconst SET_CURRENT_PAGE = 'findFriends/SET_CURRENT_PAGE';\n\nconst initialState = {\n    users: [] as Array<UserItemType>,\n    totalCount: 0 as number,\n    usersCount: 10 as number,\n    currentPage: 1 as number,\n    searchConditions: {\n        term: '',\n        isOnlyFriends: null\n    } as SearchConditionsType,\n    isFetching: false as boolean,\n    isAddingFriend: false as boolean,\n    whichFriendIsAdding: [] as Array<number>\n}\ntype FindFriendsInitialStateType = typeof initialState;\n\nconst findFriendsReducer = (state = initialState, action: FindFriendsActionTypes): FindFriendsInitialStateType => {\n    switch (action.type){\n        case TOGGLE_FRIEND:\n            let usersMapped = state.users.map(user => user.id === action.id ? { ...user, followed: action.isFriend } : user)\n            return {\n                ...state,\n                users: usersMapped\n            }\n        case SET_USERS:\n            return{\n                ...state,\n                users: [...action.users],\n            }\n        case SET_USERS_COUNT:\n            return {\n                ...state,\n                usersCount: action.usersCount\n            }\n        case SET_TOTAL_COUNT:\n            return{\n                ...state,\n                totalCount: action.totalCount\n            }\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        case TOGGLE_IS_ADDING_FRIEND:\n            return {\n                ...state,\n                isAddingFriend: action.isAddingFriend\n            }\n        case TOGGLE_WHICH_FRIEND_IS_ADDING:\n            return {\n                ...state,\n                whichFriendIsAdding: state.isAddingFriend ? [action.id] : state.whichFriendIsAdding.filter((id) => id !== action.id)\n            }\n        case SET_SEARCH_CONDITION:\n            return {\n                ...state,\n                searchConditions: {...state.searchConditions, ...action.payload}\n            }\n        default:\n            return state;\n    }\n}\ntype FindFriendsActionTypes = ToggleFriendType | SetUsersType | SetUsersCountType | SetTotalCountType | SetCurrentPageType | ToggleIsFetchingType | ToggleAddingFriendType | ToggleWhichFriendIsAddingType | SetSearchConditionType;\n\ntype SetSearchConditionType = {\n    type: typeof SET_SEARCH_CONDITION,\n    payload: SetSearchConditionArgType\n}\ntype SetSearchConditionArgType = {\n    term?: string\n    isOnlyFriends?: boolean | null\n}\nexport const setSearchConditions = (searchConditions: SetSearchConditionArgType): SetSearchConditionType => ({\n    type: SET_SEARCH_CONDITION,\n    payload: searchConditions\n})\ntype ToggleFriendType = {\n    type: typeof TOGGLE_FRIEND\n    id: number\n    isFriend: boolean\n}\nexport const toggleFriend = (id: number, isFriend: boolean): ToggleFriendType => ({\n    type: TOGGLE_FRIEND,\n    id: id,\n    isFriend: isFriend\n})\ntype SetUsersType = {\n    type: typeof SET_USERS\n    users: Array<UserItemType>\n}\nexport const setUsers = (users: Array<UserItemType>): SetUsersType => ({\n    type: SET_USERS,\n    users: users,\n})\ntype SetUsersCountType = {\n    type: typeof SET_USERS_COUNT\n    usersCount: number\n}\nexport const setUsersCount = (usersCount: number): SetUsersCountType => ({\n    type: SET_USERS_COUNT,\n    usersCount: usersCount\n})\ntype SetTotalCountType = {\n    type: typeof SET_TOTAL_COUNT\n    totalCount: number\n}\nexport const setTotalCount = (totalCount: number): SetTotalCountType => ({\n    type: SET_TOTAL_COUNT,\n    totalCount: totalCount\n})\ntype SetCurrentPageType = {\n    type: typeof SET_CURRENT_PAGE\n    currentPage: number\n}\nexport const setCurrentPage = (currPage: number): SetCurrentPageType => ({\n    type: SET_CURRENT_PAGE,\n    currentPage: currPage\n})\ntype ToggleIsFetchingType = {\n    type: typeof TOGGLE_IS_FETCHING\n    isFetching: boolean\n}\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingType => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching: isFetching\n})\ntype ToggleAddingFriendType = {\n    type: typeof TOGGLE_IS_ADDING_FRIEND\n    isAddingFriend: boolean\n}\nexport const toggleAddingFriend = (isAddingFriend: boolean): ToggleAddingFriendType => ({\n    type: TOGGLE_IS_ADDING_FRIEND,\n    isAddingFriend: isAddingFriend\n})\ntype ToggleWhichFriendIsAddingType = {\n    type: typeof TOGGLE_WHICH_FRIEND_IS_ADDING\n    id: number\n}\nexport const toggleWhichFriendIsAdding = (userId: number): ToggleWhichFriendIsAddingType => ({\n    type: TOGGLE_WHICH_FRIEND_IS_ADDING,\n    id: userId\n})\n\nexport const getUsers = (usersCount: number,\n                         pageNum: number,\n                         term: string,\n                         isOnlyFriends: boolean | string | null): AppThunk =>\n    async (dispatch) => {\n    try{\n        dispatch(setCurrentPage(pageNum));\n        dispatch(toggleIsFetching(true));\n        let data: UsersData = await UsersAPI.getUsers(usersCount, pageNum, term, isOnlyFriends);\n        dispatch(toggleIsFetching(false));\n        dispatch(setUsers(data.items));\n        dispatch(setTotalCount(data.totalCount));\n    }catch (error: any) {\n        dispatch(setGlobalMessage({message: error, isSuccess: false}))\n    }\n}\n\nexport const getAdditionalUsers = (usersCount: number,\n                                   pageNum: number,\n                                   usersAddTo: Array<UserItemType>,\n                                   term: string,\n                                   isOnlyFriends: boolean  | null): AppThunk =>\n    async (dispatch) => {\n    try{\n        dispatch(setCurrentPage(pageNum));\n        dispatch(toggleIsFetching(true));\n        let data: UsersData = await UsersAPI.getUsers(usersCount, pageNum, term, isOnlyFriends);\n        dispatch(toggleIsFetching(false));\n        dispatch(setUsers([...usersAddTo, ...data.items]));\n    }catch (error: any) {\n        dispatch(setGlobalMessage({message: error, isSuccess: false}))\n    }\n}\n\nexport const postAddFriend = (id: number): AppThunk =>\n    async (dispatch) => {\n    dispatch(toggleAddingFriend(true));\n    dispatch(toggleWhichFriendIsAdding(id));\n    const data = await FollowAPI.postAddFriend(id);\n    if(data.resultCode === ResultCodes.Success){\n        dispatch(toggleAddingFriend(false));\n        dispatch(toggleWhichFriendIsAdding(id));\n        dispatch(toggleFriend(id, true));\n    }\n}\n\nexport const deleteFriend = (id: number): AppThunk => async (dispatch) => {\n    dispatch(toggleAddingFriend(true));\n    dispatch(toggleWhichFriendIsAdding(id));\n    const data = await FollowAPI.deleteFriend(id);\n    if(data.resultCode === ResultCodes.Success){\n        dispatch(toggleAddingFriend(false));\n        dispatch(toggleWhichFriendIsAdding(id));\n        dispatch(toggleFriend(id, false));\n    }\n}\nexport default findFriendsReducer;","import {AuthAPI, ProfileAPI, ResultCodes, SecurityAPI} from \"../api/api\";\nimport {setGlobalMessage} from \"./app\";\nimport {UserProfileType} from \"../types/types\";\nimport {AppThunk} from \"../redux/reduxStore\";\n\nexport const SET_ME = 'SET_USER_DATA';\nexport const SET_AUTH_USER_PROFILE = 'SET_AUTH_USER_PROFILE';\nexport const TOGGLE_AUTH = 'TOGGLE_AUTH';\nexport const TOGGLE_IS_AUTH_DATA_INCORRECT = 'TOGGLE_IS_AUTH_DATA_INCORRECT';\nexport const TOGGLE_IS_AUTHORIZING = 'TOGGLE_IS_AUTHORIZING';\nexport const SET_AUTH_USER_STATUS = 'SET_AUTH_USER_STATUS';\nexport const SET_CAPTCHA_URL = 'SET_CAPTCHA_URL';\n\nconst initialState = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    captchaURL: null as string | null,\n    isAuth: false as boolean,\n    isAuthorizing: false as boolean,\n    isAuthDataIncorrect: false as boolean,\n    authorizedUserProfile: null as UserProfileType | null,\n    authUserStatus: '' as string\n}\ntype AuthInitialStateType = typeof initialState;\n\nconst authReducer = (state = initialState, action: AuthActionTypes): AuthInitialStateType=> {\n    switch (action.type) {\n        case SET_ME:\n            return {\n                ...state,\n                ...action.data\n            }\n        case SET_AUTH_USER_PROFILE:\n            return {\n                ...state,\n                authorizedUserProfile: action.profile\n            }\n        case TOGGLE_AUTH:\n            return {\n                ...state,\n                isAuth: action.isAuth\n            }\n        case TOGGLE_IS_AUTH_DATA_INCORRECT:\n            return {\n                ...state,\n                isAuthDataIncorrect: action.isAuthDataIncorrect\n            }\n        case TOGGLE_IS_AUTHORIZING:\n            return {\n                ...state,\n                isAuthorizing: action.isAuthorizing\n            }\n        case SET_AUTH_USER_STATUS:\n            return{\n                ...state,\n                authUserStatus: action.authUserStatus\n            }\n        case SET_CAPTCHA_URL:\n            return {\n                ...state,\n                captchaURL: action.captchaURL\n            }\n        default:\n            return state;\n    }\n}\ntype AuthActionTypes = SetMeType | SetAuthUserProfileType | ToggleAuthType | ToggleIsAuthDataIncorrectType | ToggleIsAuthorizingType | SetAuthUserStatusType | SetCaptchaURLType;\n\ntype SetMeDataType = {\n    id: number | null\n    email: string | null\n    login: string | null\n}\ntype SetMeType = {\n    type: typeof SET_ME\n    data: SetMeDataType | null\n}\nexport const setMe = (data: SetMeDataType | null): SetMeType => ({\n    type: SET_ME,\n    data\n})\ntype SetAuthUserProfileType = {\n    type: typeof SET_AUTH_USER_PROFILE\n    profile: UserProfileType | null\n}\nexport const setAuthUserProfile = (profile: UserProfileType | null): SetAuthUserProfileType => ({\n    type: SET_AUTH_USER_PROFILE,\n    profile\n})\ntype ToggleAuthType = {\n    type: typeof TOGGLE_AUTH\n    isAuth: boolean\n}\nexport const toggleAuth = (isAuth: boolean): ToggleAuthType => ({\n    type: TOGGLE_AUTH,\n    isAuth\n})\ntype ToggleIsAuthDataIncorrectType = {\n    type: typeof TOGGLE_IS_AUTH_DATA_INCORRECT\n    isAuthDataIncorrect: boolean\n}\nexport const toggleIsAuthDataIncorrect = (isIncorrect: boolean): ToggleIsAuthDataIncorrectType => ({\n    type: TOGGLE_IS_AUTH_DATA_INCORRECT,\n    isAuthDataIncorrect: isIncorrect\n})\ntype ToggleIsAuthorizingType = {\n    type: typeof TOGGLE_IS_AUTHORIZING\n    isAuthorizing: boolean\n}\nexport const toggleIsAuthorizing = (isAuthorizing: boolean): ToggleIsAuthorizingType => ({\n    type: TOGGLE_IS_AUTHORIZING,\n    isAuthorizing\n})\ntype SetAuthUserStatusType = {\n    type: typeof SET_AUTH_USER_STATUS\n    authUserStatus: string\n}\nexport const setAuthUserStatus = (authUserStatus: string): SetAuthUserStatusType => ({\n    type: SET_AUTH_USER_STATUS,\n    authUserStatus\n})\ntype SetCaptchaURLType = {\n    type: typeof SET_CAPTCHA_URL\n    captchaURL: string\n}\nexport const setCaptchaURL = (captchaURL: string): SetCaptchaURLType =>({\n    type: SET_CAPTCHA_URL,\n    captchaURL\n})\n\nexport const putNewUserPhotoAndRefreshProfileState = (formData: FormData, authUserId: number):AppThunk => (dispatch) =>{\n    ProfileAPI.putUsersPhoto(formData)\n        .then((response)=>{\n            if(response.resultCode === ResultCodes.Success){\n                ProfileAPI.getUserProfileData(authUserId)\n                    .then((profileData) => {\n                        dispatch(setAuthUserProfile(profileData));\n                    })\n            }\n        })\n}\n\nexport const getAuthUserDataAndGetSetAuthUserProfileData = ():AppThunk => async (dispatch) => {\n    dispatch(toggleIsAuthorizing(true));\n    let data = await AuthAPI.getAuthUserData()\n    if(data.resultCode === ResultCodes.Success) {\n        dispatch(toggleAuth(true));\n        dispatch(setMe(data.data));\n        let profileData = await ProfileAPI.getUserProfileData(data.data.id);\n        let status = await ProfileAPI.getUserStatus(data.data.id);\n        dispatch(setAuthUserProfile(profileData));\n        dispatch(setAuthUserStatus(status));\n    }\n    dispatch(toggleIsAuthorizing(false));\n}\nexport const getAuthUserData = ():AppThunk => (dispatch) => {\n    dispatch(toggleIsAuthorizing(true))\n    AuthAPI.getAuthUserData()\n        .then((data) => {\n            dispatch(toggleIsAuthorizing(false))\n            if(data.resultCode === ResultCodes.Success){\n                dispatch(toggleAuth(true))\n            }\n            if(data.resultCode){\n                dispatch(toggleAuth(false))\n            }\n        })\n}\n\nexport const authorize = (email: string, password: string, rememberMe: boolean, captcha: string):AppThunk => (dispatch) => {\n    return AuthAPI.authorize(email, password, rememberMe, captcha)\n        .then((data) => {\n            if(data.resultCode === ResultCodes.Success){\n                dispatch(toggleIsAuthDataIncorrect(false));\n                dispatch(getAuthUserDataAndGetSetAuthUserProfileData());\n                return Promise.resolve(data.messages);\n            }\n            if(data.resultCode){\n                if(data.resultCode === ResultCodes.CaptchaRequired){\n                    dispatch(getCaptchaURL())\n                }\n                dispatch(toggleIsAuthDataIncorrect(true))\n                return Promise.reject(data.messages);\n            }\n        })\n}\n\nexport const unAuthorize = ():AppThunk => (dispatch) => {\n    AuthAPI.unAuthorize()\n        .then((data) => {\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(toggleAuth(false));\n                dispatch(setAuthUserProfile(initialState.authorizedUserProfile));\n                dispatch(setMe(null));\n            }\n        })\n}\nexport const refreshAuthUserProfileData = (profileData: UserProfileType):AppThunk => async (dispatch) => {\n    try {\n        const dataResult = await ProfileAPI.putUserProfile(profileData)\n        if (dataResult.resultCode === ResultCodes.Success) {\n            const authUserData = await AuthAPI.getAuthUserData();\n            const authUserProfileData = await ProfileAPI.getUserProfileData(authUserData.data.id);\n            dispatch(setAuthUserProfile(authUserProfileData));\n            dispatch(setGlobalMessage({message: 'Profile update is successful', isSuccess: true}));\n        }\n    } catch (error: any) {\n        dispatch(setGlobalMessage({message: error, isSuccess: false}));\n    }\n}\n\nexport const getCaptchaURL = ():AppThunk => async (dispatch) => {\n    try {\n        const response = await SecurityAPI.getCaptcha();\n        dispatch(setCaptchaURL(response.url))\n    }catch (error: any){\n        dispatch(setGlobalMessage({message: error, isSuccess: false}))\n    }\n\n}\n\nexport default authReducer;","\nconst initialState = {\n        friendsList: [\n            {\n                avatar: 'https://miro.medium.com/max/1400/1*JyYin7G7aGwgD9zpYBZ12Q.png',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTcI9trY8oLre9yDw8OL15v4w7gYlmHL5oIpQwot7Qy26HxtcrMLPBMoc3iJvdM_KOJgTY&usqp=CAU',\n                name: 'John',\n                isOnline: false\n            },\n            {\n                avatar: 'https://img.freepik.com/free-photo/pleasant-looking-serious-man-stands-in-profile-has-confident-expression-wears-casual-white-t-shirt_273609-16959.jpg?size=626&ext=jpg',\n                name: 'Peter',\n                isOnline: false\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSYH_VDaGfxQ_cPhkgDPyoxXJgnnKHzEw7kdg&usqp=CAU',\n                name: 'Vasya',\n                isOnline: true\n            }, {\n                avatar: 'https://images.unsplash.com/photo-1614283233556-f35b0c801ef1?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8d29tYW4lMjBwcm9maWxlfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://miro.medium.com/max/1400/1*JyYin7G7aGwgD9zpYBZ12Q.png',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTcI9trY8oLre9yDw8OL15v4w7gYlmHL5oIpQwot7Qy26HxtcrMLPBMoc3iJvdM_KOJgTY&usqp=CAU',\n                name: 'John',\n                isOnline: false\n            },\n            {\n                avatar: 'https://img.freepik.com/free-photo/pleasant-looking-serious-man-stands-in-profile-has-confident-expression-wears-casual-white-t-shirt_273609-16959.jpg?size=626&ext=jpg',\n                name: 'Peter',\n                isOnline: false\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSYH_VDaGfxQ_cPhkgDPyoxXJgnnKHzEw7kdg&usqp=CAU',\n                name: 'Vasya',\n                isOnline: true\n            }, {\n                avatar: 'https://images.unsplash.com/photo-1614283233556-f35b0c801ef1?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8d29tYW4lMjBwcm9maWxlfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://miro.medium.com/max/1400/1*JyYin7G7aGwgD9zpYBZ12Q.png',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTcI9trY8oLre9yDw8OL15v4w7gYlmHL5oIpQwot7Qy26HxtcrMLPBMoc3iJvdM_KOJgTY&usqp=CAU',\n                name: 'John',\n                isOnline: false\n            },\n            {\n                avatar: 'https://img.freepik.com/free-photo/pleasant-looking-serious-man-stands-in-profile-has-confident-expression-wears-casual-white-t-shirt_273609-16959.jpg?size=626&ext=jpg',\n                name: 'Peter',\n                isOnline: false\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSYH_VDaGfxQ_cPhkgDPyoxXJgnnKHzEw7kdg&usqp=CAU',\n                name: 'Vasya',\n                isOnline: true\n            }, {\n                avatar: 'https://images.unsplash.com/photo-1614283233556-f35b0c801ef1?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8d29tYW4lMjBwcm9maWxlfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://miro.medium.com/max/1400/1*JyYin7G7aGwgD9zpYBZ12Q.png',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTcI9trY8oLre9yDw8OL15v4w7gYlmHL5oIpQwot7Qy26HxtcrMLPBMoc3iJvdM_KOJgTY&usqp=CAU',\n                name: 'John',\n                isOnline: false\n            },\n            {\n                avatar: 'https://img.freepik.com/free-photo/pleasant-looking-serious-man-stands-in-profile-has-confident-expression-wears-casual-white-t-shirt_273609-16959.jpg?size=626&ext=jpg',\n                name: 'Peter',\n                isOnline: false\n            },\n            {\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSYH_VDaGfxQ_cPhkgDPyoxXJgnnKHzEw7kdg&usqp=CAU',\n                name: 'Vasya',\n                isOnline: true\n            },\n            {\n                avatar: 'https://images.unsplash.com/photo-1614283233556-f35b0c801ef1?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8d29tYW4lMjBwcm9maWxlfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80',\n                name: 'Vasya',\n                isOnline: true\n            },\n        ]\n}\n\nconst rightSideBarReducer = (state = initialState, action) => {\n    return initialState;\n}\n\nexport default rightSideBarReducer;","\nconst initialState = {\n    friendsId: [1, 10, 4, 3]\n}\n\nconst friendsListReducer = (state = initialState, action) => {\n    switch (action.type){\n        default:\n            return state;\n    }\n}\n\nexport default friendsListReducer;","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport dialogsReducer from \"../reducers/dialogs\";\nimport profileReducer from \"../reducers/profile\";\nimport rightSideBarReducer from \"../reducers/rightSideBar\";\nimport friendsListReducer from \"../reducers/friendsList\";\nimport findFriendsReducer from \"../reducers/findFriends\";\nimport authReducer from \"../reducers/auth\";\nimport appReducer from \"../reducers/app\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {ThunkAction} from \"redux-thunk\";\nimport { AnyAction } from 'redux';\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\n\nlet reducersCombined = combineReducers({\n    dialogs: dialogsReducer,\n    profile: profileReducer,\n    rightSideBar: rightSideBarReducer,\n    friendsList: friendsListReducer,\n    findFriends: findFriendsReducer,\n    auth: authReducer,\n    app: appReducer\n});\nconst store = createStore(reducersCombined, composeWithDevTools(applyMiddleware(thunkMiddleware)\n));\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    AnyAction\n    >\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// let store = createStore(reducersCombined, applyMiddleware(thunkMiddleware));\n\nexport default store;","import axios, {AxiosResponse} from \"axios\";\nimport {UserItemType, UserProfileType} from \"../types/types\";\n\nconst instanceAxios = axios.create({\n    withCredentials: true,\n    headers: {\n        'API-KEY': '33944b96-dc0e-43ef-af5e-764a7198445e'\n    },\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\n})\n\nexport type ResponseBox<DataType = {}, RC = ResultCodes> = {\n    data: DataType\n    resultCode: RC\n    messages: Array<string>\n}\nexport type GetUsersResponseType = {\n    items: UserItemType[]\n    totalCount: number\n    error: string\n}\nexport enum ResultCodes {\n    Success = 0,\n    Error = 1,\n    CaptchaRequired = 10\n}\nconst requestCommonThen = (request: Function) => {\n    return request()\n        .then((response: AxiosResponse) => response.data)\n        .catch((error: any) => Promise.reject(error.message))\n}\n\nexport const UsersAPI = {\n    getUsers(usersCount = 10, page = 1, term: string | null, friend: boolean | string | null) {\n        const nameToSearch =  term ? `&term=${term}` : '';\n        const isOnlyFriends = friend === null ? '' : `&friend=${friend}`;\n        return requestCommonThen(() =>\n            instanceAxios\n                .get<GetUsersResponseType>(`users?count=${usersCount}&page=${page}${nameToSearch}${isOnlyFriends}`)\n        )\n    },\n}\n\nexport const ProfileAPI = {\n    getUserProfileData(id: number) {\n        return instanceAxios\n            .get<UserProfileType>(`profile/${id}`)\n            .then((response) => response.data)\n    },\n    putUsersPhoto(formData: FormData) {\n        return instanceAxios\n            .put('profile/photo', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            })\n            .then((response) => response.data)\n    },\n    getUserStatus(id: number){\n        return requestCommonThen(() =>\n            instanceAxios\n                .get<ResponseBox<string>>(`profile/status/${id}`)\n        )\n    },\n    putUserStatus(status: string){\n        return requestCommonThen(() =>\n            instanceAxios\n                .put('profile/status', {status})\n        )\n    },\n    putUserProfile(profileData: UserProfileType){\n        return requestCommonThen(() =>\n            instanceAxios\n                .put('profile', profileData)\n        )\n    }\n}\n\nexport const FollowAPI = {\n    postAddFriend(id: number = 1) {\n        return instanceAxios\n            .post(`follow/${id}`)\n            .then((response) => response.data)\n    },\n    deleteFriend(id: number) {\n        return instanceAxios\n            .delete(`follow/${id}`)\n            .then((response) => response.data)\n    }\n}\nexport const AuthAPI = {\n    getAuthUserData() {\n        return instanceAxios\n            .get<ResponseBox<{id: number\n                email: string\n                login: string}>>('auth/me')\n            .then((response) => response.data)\n    },\n    authorize(email: string, password: string, rememberMe: boolean, captcha: string = ''){\n        return instanceAxios\n            .post('auth/login', {\n                email: email,\n                password: password,\n                rememberMe: rememberMe,\n                captcha: captcha\n            })\n            .then((response) => response.data)\n    },\n    unAuthorize(){\n        return instanceAxios\n            .delete('auth/login')\n            .then((response) => response.data)\n    }\n}\nexport const SecurityAPI = {\n    getCaptcha(){\n        return requestCommonThen(() =>\n            instanceAxios\n                .get<ResponseBox<{url: string}>>('security/get-captcha-url')\n        )\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from \"react\";\n\n\nexport const useOutsideAlerter = (ref, callback) =>  {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                callback(false)\n            }\n        }\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n","import './Nav.scss'\nimport {NavLink} from \"react-router-dom\";\nimport React, { useState } from 'react';\nimport {useOutsideAlerter} from \"../SharedComponents/sharedFunc\";\n\nconst Nav = (props) => {\n    const navBarRef = React.createRef();\n    const [isNavBarOpened, toggleNavBarOpening] = useState(false);\n    useOutsideAlerter(navBarRef, toggleNavBarOpening);\n    const burgerOnClick = () => {\n        toggleNavBarOpening(!isNavBarOpened)\n    }\n    if(!props.isAuth) return null;\n    return(\n        <nav className={isNavBarOpened ? 'nav nav--opened' : 'nav'} ref={navBarRef}>\n            <ul className='nav__list'>\n                <li>\n                    <div className='nav__burger nav__item' onClick={burgerOnClick}>\n                        <i className=\"fas fa-bars\"/>\n                        <span className=\"nav__item-description\">Collapse Menu</span>\n                    </div>\n                </li>\n                <li>\n                    <NavLink className='nav__item' to='/profile'>\n                        <i className=\"far fa-user-circle\"/>\n                        <span className=\"nav__item-description\">Profile</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink className='nav__item' to='/dialogs'>\n                        <i className=\"far fa-envelope\"/>\n                        <span className=\"nav__item-description\">Dialogs</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink className='nav__item' to='/news'>\n                        <i className=\"far fa-newspaper\"/>\n                        <span className=\"nav__item-description\">News</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink className='nav__item' to='/music'>\n                        <i className=\"fas fa-headphones-alt\"/>\n                        <span className=\"nav__item-description\">Music</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink className='nav__item' to='/settings'>\n                        <i className=\"fas fa-wrench\"/>\n                        <span className=\"nav__item-description\">Settings</span>\n                    </NavLink>\n                </li>\n            </ul>\n        </nav>\n    )\n}\nexport default Nav;","import './DialogItem.scss';\nimport {NavLink} from \"react-router-dom\";\n\n\nconst DialogItem = (props) => {\n    return(\n        <NavLink className=\"dialogItem\" to={'/dialogs/' + props.id}>\n            <img className='dialogItem__avatar' src={props.avatarLink} />\n            <div className=\"dialogItem__text-box\">\n                <p className=\"dialogItem__name\">{props.name}</p>\n                <p className=\"dialogItem__first-message\">\n                    <span className=\"dialogItem__first-message-name\">{props.messageName}: </span>{props.message}\n                </p>\n            </div>\n        </NavLink>\n    )\n}\n\nexport default DialogItem;","import './Message.scss'\n\nconst Message = (props) => {\n    const messageDefaultClass = 'message__wrapper';\n    let myMessageModifier = '--my-message';\n    if(props.owner){\n        myMessageModifier = '';\n    }\n\n    return(\n        <div className={ `${messageDefaultClass} ${messageDefaultClass}${myMessageModifier}` }>\n            <div className=\"message\">\n                <p className=\"message__text\">{props.message}</p>\n                <p className=\"message__time\">{props.time}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Message;","import './MessageInput.scss'\nimport React from \"react\";\nimport Button from \"../../SharedComponents/Button\";\n\nconst MessageInput = (props) => {\n    let textAreaEl = React.createRef();\n    const textAreaOnChange = () => {\n        props.textAreaOnChange(textAreaEl)\n    }\n    const sendMessageOnClick = () => {\n        props.sendMessage(props.messageInputValue)\n    }\n    return(\n        <div className=\"message-input\">\n            <textarea ref={textAreaEl}\n                      cols=\"40\"\n                      rows=\"10\"\n                      placeholder='Write your message...'\n                      className=\"message-input__textarea\"\n                      value={props.messageInputValue}\n                      onChange={textAreaOnChange}\n            />\n            <div onClick={sendMessageOnClick}>\n                <Button textareaEl={textAreaEl} inner='Send' />\n            </div>\n        </div>\n    )\n}\n\nexport default MessageInput;","import MessageInput from \"../components/Dialogs/MessageInput/MessageInput\";\nimport {sendMessageActionCreator, updateNewMessageTextActionCreator} from \"../reducers/dialogs\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n    return{\n        messageInputValue: state.dialogs.messageInputValue\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (messageInputValue) => {\n            if (messageInputValue) {\n                let date = new Date();\n                let action = sendMessageActionCreator(messageInputValue, date.toLocaleTimeString('en-GB',                   {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                    })\n                );\n                dispatch(action);\n            }\n        },\n        textAreaOnChange: (textAreaEl) => {\n            dispatch(updateNewMessageTextActionCreator(textAreaEl.current.value));\n        }\n    }\n}\nconst MessageInputContainer = connect(mapStateToProps, mapDispatchToProps)(MessageInput);\n\nexport default MessageInputContainer;","import {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {removeGlobalMessage} from \"../reducers/app\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n    isAuthorizing: state.auth.isAuthorizing\n})\n\nexport const withAuthRedirect = (Component) => {\n    const RedirectComponent = (props) => {\n        if(!props.isAuth && !props.isAuthorizing) return <Redirect to='/login' />\n        return <Component {...props}/>\n    }\n\n    return connect(mapStateToPropsForRedirect, { removeGlobalMessage })(RedirectComponent);\n}","import './Dialogs.scss';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport MessageInputContainer from \"../../containers/MessageInputContainer\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nconst Dialogs = (props) => {\n    let state = props.state;\n    let messagesElements = state.dialogs.messages.map(el => (<Message message={el.message} time={el.time} owner={el.owner}/>));\n    let dialogElements = state.dialogs.dialogItems.map(el=>(<DialogItem id={el.id} avatarLink={el.avatarLink} name={el.name} messageName={el.messageName} message={el.message}/>));\n    return(\n        <div className='dialogs'>\n            <div className='dialogs-items'>\n                {dialogElements}\n            </div>\n            <div className=\"messages-box\">\n                <div className=\"messages\">\n                    {messagesElements}\n                </div>\n                <MessageInputContainer store={props.store} />\n            </div>\n        </div>\n    )\n}\n\nexport default withAuthRedirect(Dialogs);","import './News.scss'\n\nconst News = () => {\n    return(\n        <div className='news'>\n            News\n        </div>\n    )\n}\n\nexport default News;","import './Music.scss'\n\nconst Music = () => {\n    return(\n        <div className='music'>\n            Music\n        </div>\n    )\n}\nexport default Music;","import './FriendItem.scss'\n\nconst FriendItem = (props) => {\n    let isOnline = '';\n    if(props.isOnline){\n        isOnline = 'online'\n    }\n    return(\n        <div className=\"friend-item\">\n            <img src={props.avatar} alt={props.name} className=\"friend-item__avatar\"/>\n            <div className={`friend-item__is-online friend-item__${isOnline}`} />\n        </div>\n    )\n}\n\nexport default FriendItem;","import './RightSideBar.scss'\nimport FriendItem from \"./FriendItem/FriendItem\";\n\nconst RightSideBar = (props) => {\n    if(!props.isAuth) return null;\n\n    let friendsList = props.data.friendsList.map(friend=><FriendItem\n            avatar={friend.avatar}\n            name={friend.name}\n            isOnline={friend.isOnline}\n        />\n    )\n    return(\n        <div className=\"right-side-bar\">\n            {friendsList}\n        </div>\n    )\n}\n\nexport default RightSideBar;","export default __webpack_public_path__ + \"static/media/defaultAvatar.487e150e.png\";","import './UserItem.scss'\nimport Button from \"../../SharedComponents/Button\";\nimport React, {FC, useRef} from \"react\";\nimport defaultAvatar from '../../../assets/images/defaultAvatar.png'\nimport {NavLink} from \"react-router-dom\";\nimport {UserItemType} from \"../../../types/types\";\n\ntype UserItemProps = UserItemType & {\n    whichFriendIsAdding: Array<number>\n    postAddFriend: Function\n    deleteFriend: Function\n}\nconst UserItem: FC<UserItemProps> = (props) => {\n    const toggleFriendBtn = useRef<HTMLDivElement>(null);\n    const changeButtonInner = (): string => {\n        if (props.followed)\n            return 'Remove';\n        else\n            return 'Add Friend';\n    }\n\n    const toggleFriendOnClick = () => {\n        if(!props.followed){\n            props.postAddFriend(props.id);\n            changeButtonInner();\n        }\n        if(props.followed){\n            props.deleteFriend(props.id);\n            changeButtonInner();\n        }\n    }\n    return(\n        <div className=\"user-item\">\n            <NavLink to={`/profile/${props.id}`} className=\"user-item__avatar-box\">\n                <img src={props.photos.small ? props.photos.small : defaultAvatar} alt={props.name} className=\"user-item__avatar\"/>\n                </NavLink>\n            <div ref={toggleFriendBtn} onClick={toggleFriendOnClick} className='user-item__btn-wrapper'>\n                <Button inner={changeButtonInner()} disabled={props.whichFriendIsAdding.some((id: number) => id === props.id)}/>\n            </div>\n            <NavLink to={`/profile/${props.id}`} className=\"user-item__name\">{props.name}</NavLink>\n            {/*<p className=\"user-item__country\">{props.location.country + ', ' + props.location.city}</p>*/}\n            <p className=\"user-item__about\">{props.status}</p>\n        </div>\n    )\n    \n}\n\nexport default UserItem;","import './SearchFilters.scss';\nimport {Formik} from \"formik\";\n\nconst SearchFilters = ({setQueryParams, setSearchConditions}) => {\n    return(\n        <div className='search-filter'>\n            <p className=\"search-filter__title\">Search Options</p>\n            <Formik\n                initialValues={{isOnlyFriends: null}}\n                onSubmit={values => {\n                    let value;\n                    switch (values.isOnlyFriends){\n                        case 'true':\n                            value = true;\n                            break;\n                        case 'false':\n                            value = false;\n                            break;\n                        default:\n                            value = null;\n                    }\n                    setSearchConditions({isOnlyFriends: value});\n                    setQueryParams('friends', value);\n                }}\n            >\n                {\n                    formik => (\n                        <form action=\"\" className=\"search-filter__form\" >\n                            <select name={\"isOnlyFriends\"} onChange={(e) => {\n                                formik.handleChange(e);\n                                formik.handleSubmit();\n                            }} className='search-filter__select'>\n                                <option value={''} className=\"search-filter__select-option\">All</option>\n                                <option value={'true'} className=\"search-filter__select-option\">Only Friends</option>\n                                <option value={'false'} className=\"search-filter__select-option\">Except Friends</option>\n                            </select>\n                        </form>\n                    )\n                }\n            </Formik>\n\n        </div>\n    )\n}\n\nexport default SearchFilters;","import './ShowMoreBtn.scss'\n\nconst ShowMoreBtn = () => {\n    return(\n        <div className='show-more-btn'>\n            <button className=\"show-more-btn__btn\">\n                <i className=\"fas fa-redo\" />\n                <p>Show more</p>\n            </button>\n        </div>\n    )\n}\n\nexport default ShowMoreBtn;","import './Pagination.scss';\nimport React, {useState} from 'react';\nimport {nanoid} from \"nanoid\";\n\nconst space = (onClick, mod) => <div key={nanoid()} onClick={() => onClick(mod)} className='pagination__number-box'><span className=\"pagination__number\">...</span></div>;\n\nconst Pagination = ({ currentPage, itemsCount, totalCount, getItems, numOfLinks}) => {\n    const pagesCount = Math.ceil(totalCount / itemsCount);\n    let linksCount = pagesCount;\n    let [startLinkNum, setStartLinkNum] = useState(null);\n    let startLinkNumVar = 1;\n    const linkSize = (currentPage + '').length >= 5 ? 'pagination__number-box--large' : '';\n\n    const getLink = (page) => {\n        return (\n            <div key={nanoid()}\n                     className={page !== currentPage ? `pagination__number-box ${linkSize}` : `pagination__number-box pagination__current-page ${linkSize}`}\n                     onClick={() => {\n                         changeCurrentPageOnClick(page);\n                         setStartLinkNum(null);\n                     }}\n            >\n                <span className=\"pagination__number\"\n                      data-testid = {page === currentPage ? 'current page' : 'link'}\n                >\n                    {page}\n                </span>\n            </div>\n        )\n    }\n    const getStartNumAndFinishNumByCurrentPage = (currentPage, pagesCount, additionalLinks, numOfLinks) => {\n        let start = 1;\n        let finish = numOfLinks;\n        let additionalLinksForLastPage = pagesCount % numOfLinks;\n\n        if(additionalLinks === 0 && currentPage >= numOfLinks) start= currentPage - (numOfLinks - 1);\n        if(additionalLinks === 1 && currentPage > numOfLinks) start = currentPage;\n        if(additionalLinks > 1 && currentPage > numOfLinks) start = currentPage - additionalLinks + 1;\n        if(currentPage > pagesCount - additionalLinksForLastPage){\n            finish = pagesCount;\n            start = pagesCount - (additionalLinksForLastPage - 1);\n        }\n        if(currentPage <= pagesCount - additionalLinksForLastPage) finish = start + (numOfLinks - 1);\n        if(pagesCount === 0){ finish = 1; start = 1 }\n        return [start, finish];\n    }\n    const mapPageLinks = (startNumAfterSpaceClick) => {\n        let linksArr = [];\n        const additionalLinks = currentPage % numOfLinks;\n\n        if(startNumAfterSpaceClick){\n            startLinkNumVar = startNumAfterSpaceClick;\n            linksCount = startNumAfterSpaceClick + numOfLinks - 1 <= pagesCount\n                ? startNumAfterSpaceClick + numOfLinks - 1\n                : pagesCount;\n        }\n        if(!startNumAfterSpaceClick){\n            [startLinkNumVar, linksCount] = getStartNumAndFinishNumByCurrentPage(currentPage, pagesCount, additionalLinks, numOfLinks)\n        }\n\n        //creating linksArr\n        if((currentPage > numOfLinks && !startNumAfterSpaceClick) || startNumAfterSpaceClick > numOfLinks){\n            linksArr.push(getLink(1));\n            linksArr.push(space(watchAdditionalLinksOnClick, -numOfLinks));\n        }\n        for(let i = startLinkNumVar; i <= linksCount; i++){\n            linksArr.push(getLink(i));\n        }\n        if((currentPage < pagesCount - (pagesCount % numOfLinks) && !startNumAfterSpaceClick)\n            || (startNumAfterSpaceClick && startNumAfterSpaceClick < pagesCount - (pagesCount % numOfLinks))) {\n            linksArr.push(space(watchAdditionalLinksOnClick, numOfLinks));\n            linksArr.push(getLink(pagesCount));\n        }\n        return linksArr;\n    }\n    const changeCurrentPageOnClick = (page) => {\n        window.scrollTo( 0, 0 );\n        getItems(itemsCount, page);\n    }\n    const watchAdditionalLinksOnClick = (mod = numOfLinks) => {\n        if(startLinkNumVar > numOfLinks && Math.sign(mod) === -1){\n            setStartLinkNum(startLinkNumVar + mod)\n        }\n        if(startLinkNumVar < pagesCount - numOfLinks &&  Math.sign(mod) === 1){\n            setStartLinkNum(startLinkNumVar + mod)\n        }\n    }\n    const arrowOnClick = (mod) =>{\n        if(currentPage > 1 && !(mod+1)){\n            changeCurrentPageOnClick(currentPage + mod);\n        }\n        if(currentPage + 1 <= pagesCount && (mod+1)){\n            changeCurrentPageOnClick(currentPage + mod);\n        }\n        setStartLinkNum(null);\n    }\n    return (\n        <div className={'pagination'}>\n            <div onClick={() => arrowOnClick(-1)}\n                 className=\"pagination__arrow pagination__arrow-prev\"\n                 data-testid={'prev'}\n            />\n            <div className={\"pagination__numbers-box\"} >\n                {mapPageLinks(startLinkNum)}\n            </div>\n            <div onClick={() => arrowOnClick(1)}\n                 className=\"pagination__arrow pagination__arrow-next\"\n                 data-testid={'next'}\n            />\n        </div>\n    )\n}\n\nexport default Pagination;","import {Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport React, {useEffect, useState} from \"react\";\nimport './SearchInput.scss';\n\nconst SearchInput = ({setQueryParams, setSearchConditions}) => {\n    const [searchTerm, setOutput] = useState(null);\n    const searchFieldOnSubmit = (term) => {\n        setSearchConditions({term});\n        setQueryParams('term', term);\n    }\n    useEffect(() => {\n        let timeout;\n        if(searchTerm !== null){\n             timeout = setTimeout(() => {\n                searchFieldOnSubmit(searchTerm);\n            }, 1600);\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [searchTerm]);\n    return(\n        <Formik\n            initialValues={{termFindFriends: searchTerm}}\n            validationSchema={Yup.object({\n                termFindFriends: Yup.string().max(100, 'Search keys must be less than 100 characters')\n            })}\n            onSubmit={(values) => searchFieldOnSubmit(values.termFindFriends)}\n        >\n            {formik => (\n                <form className=\"search-input__search-box\" onSubmit={formik.handleSubmit}>\n                    <input onChange={(e) => {\n                        formik.handleChange(e);\n                        setOutput(e.currentTarget.value);\n                    }} type=\"text\" className=\"search-input__search-input\" name={'termFindFriends'} placeholder='Search...'/>\n                    <button className=\"search-input__search-btn-submit\" type='submit'>\n                        <i className=\"fas fa-search \"/>\n                    </button>\n                </form>\n            )}\n        </Formik>\n    )\n}\n\nexport default SearchInput;","import './FindFriends.scss'\nimport UserItem from \"./UserItem/UserItem\";\nimport SearchFilters from \"./SearchFilters/SearchFilters\";\nimport ShowMoreBtn from \"./ShowMoreBtn/ShowMoreBtn\";\nimport React, {FC} from 'react';\nimport Pagination from \"../SharedComponents/Pagination/Pagination\";\nimport SearchInput from \"./SearchInput/SearchInput\";\nimport {nanoid} from \"nanoid\";\nimport {FindFriendsPropsType} from \"../../containers/FindFriendsContainer\";\nimport {useHistory} from \"react-router-dom\";\n\nconst FindFriends: FC<FindFriendsPropsType> = (props) => {\n    const {usersCount, currentPage, getUsers} = props;\n    const history = useHistory();\n    const {location} = history;\n\n    const mapUserItems = () => {\n        return props.users.map((item) =>\n            <UserItem key={nanoid()}\n                      photos={item.photos}\n                      name={item.name}\n                      status={item.status}\n                      followed={item.followed}\n                      id={item.id}\n                      whichFriendIsAdding={props.whichFriendIsAdding}\n                      postAddFriend={props.postAddFriend}\n                      deleteFriend={props.deleteFriend}\n            />)\n\n    }\n    const showMoreUsersOnClick = () => {\n        let yOffset = window.scrollY;\n        props.getAdditionalUsers(props.usersCount, +props.currentPage + 1, props.users, props.searchConditions.term, props.searchConditions.isOnlyFriends);\n        window.scrollTo( 0, yOffset );\n    }\n    const setQueryParams = (paramType: 'term' | 'friends' | 'page', value: boolean | string | number | null) => {\n        const REG_EX = paramType === 'term'\n            ? /term=\\w*/\n            : 'page'\n                ? /page=\\d*/\n                : /friends=(true|false|null)/;\n        let locationSliced = '';\n        if(location.search) {\n            locationSliced = location.search.slice(1);\n        }\n        if(location.search.includes(paramType)) {\n            const updParams = location.search.replace(REG_EX, `${paramType}=${value}`);\n            history.push(updParams);\n        }\n        if(!location.search.includes(paramType)){\n            history.push(`${location.pathname}?${locationSliced}&${paramType}=${value}`)\n        }\n    }\n    return(\n        <div className='find-friends'>\n            <div className=\"find-friends__search-box\">\n                <SearchInput setQueryParams={setQueryParams} setSearchConditions={props.setSearchConditions}/>\n            </div>\n            <SearchFilters setQueryParams={setQueryParams} setSearchConditions={props.setSearchConditions}/>\n            <div className={props.isFetching ? \"find-friends__user-list find-friends__user-list--is-fetching\" : \"find-friends__user-list\"}>\n                {mapUserItems()}\n                <div className=\"find-friends__show-more-wrapper\">\n                    {\n                        props.currentPage < Math.ceil(props.totalCount / props.usersCount)\n                            ?\n                            <div className=\"find-friends__show-more-box\" onClick={showMoreUsersOnClick}>\n                                <ShowMoreBtn />\n                            </div>\n                            :\n                            null\n                    }\n                </div>\n            </div>\n            <div className=\"find-friends__pagination-box\" >\n                <Pagination\n                    currentPage={+currentPage}\n                    itemsCount={usersCount}\n                    totalCount={props.totalCount}\n                    getItems={(itemsCount: number, page: number) => {\n                        getUsers(itemsCount, page, props.searchConditions?.term, props.searchConditions?.isOnlyFriends);\n                        setQueryParams('page', page);\n                    }}\n                    numOfLinks={5}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default FindFriends;","import {connect,  ConnectedProps} from \"react-redux\";\nimport React, {FC, useEffect} from 'react';\nimport {\n    deleteFriend,\n    getAdditionalUsers,\n    getUsers, postAddFriend,\n    setCurrentPage, setSearchConditions,\n    setTotalCount,\n    setUsers,\n    setUsersCount, toggleAddingFriend,\n    toggleFriend,\n    toggleIsFetching, toggleWhichFriendIsAdding\n} from \"../reducers/findFriends\";\nimport FindFriends from \"../components/FindFriends/FindFriends\";\nimport {useLocation} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {withGlobalMessage} from \"../hoc/withGlobalMessage\";\nimport {RootState} from \"../redux/reduxStore\";\nimport qs from 'qs';\n\nconst FindFriendsContainer: FC<FindFriendsPropsType> = (props) => {\n    let location: any = useLocation();\n    const paramsParsed = qs.parse(location.search, { ignoreQueryPrefix: true });\n    const {term, isOnlyFriends} = props.searchConditions;\n    useEffect(() => {\n        window.scrollTo( 0, 0 );\n        if(location.search){\n            const urlPageNum = paramsParsed.page ? paramsParsed.page : 1;\n            const friends = paramsParsed.friends ? paramsParsed.friends as string : isOnlyFriends;\n            const finalTerm = paramsParsed.term ? paramsParsed.term as string : term;\n            props.getUsers(props.usersCount, +urlPageNum, finalTerm, friends);\n        }\n        if(!location.search) props.getUsers(props.usersCount, 1, '', null)\n        //     .then(() => countGoodUsers());\n        // const countGoodUsers = async () => {\n        //     const pagesCount = Math.ceil(this.props.totalCount / 100);\n        //     let usersArray = [];\n        //     let i = 1;\n        //         setInterval(() => {\n        //             if(i === pagesCount) return;\n        //             UsersAPI.getUsers(100, i)\n        //                 .then((data) => {\n        //                     for(let j = 0; j < data.items.length; j++){\n        //                         if(data.items[j].photos.small){\n        //                             usersArray.push(data.items[j])\n        //                         }\n        //                     }\n        //                     i++;\n        //                     console.log(`Good users count: ${usersArray.length}.\n        //                                 Total users count: ${this.props.totalCount}.\n        //                                 Ratio: ${usersArray.length / this.props.totalCount}`)\n        //                 })\n        //         }, 1000)\n        // }\n    },[location.search])\n    return(\n        <FindFriends {...props}/>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return{\n        users: state.findFriends.users,\n        usersCount: state.findFriends.usersCount,\n        currentPage: state.findFriends.currentPage,\n        totalCount: state.findFriends.totalCount,\n        isFetching: state.findFriends.isFetching,\n        isAddingFriend: state.findFriends.isAddingFriend,\n        whichFriendIsAdding: state.findFriends.whichFriendIsAdding,\n        searchConditions: state.findFriends.searchConditions\n    }\n}\nconst connector = connect(\n    mapStateToProps,\n    {\n        toggleFriend,\n        setUsers,\n        setUsersCount,\n        setTotalCount,\n        setCurrentPage,\n        toggleIsFetching,\n        toggleAddingFriend,\n        toggleWhichFriendIsAdding,\n        getUsers,\n        getAdditionalUsers,\n        postAddFriend,\n        deleteFriend,\n        setSearchConditions\n    }\n);\nexport type FindFriendsPropsType = ConnectedProps<typeof connector>\n/*\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        toggleFriend: (id, isFriend) => {\n            dispatch(toggleFriendActionCreator(id, isFriend))\n        },\n        setUsers: (users) => {\n            dispatch(setUsersActionCreator(users))\n        },\n        setUsersCount: (usersCount) => {\n            dispatch(setUsersCountActionCreator(usersCount))\n        },\n        setTotalCount: (totalCount) => {\n            dispatch(setTotalCountActionCreator(totalCount))\n        },\n        setCurrPage: (currPage) => {\n            dispatch(setCurrentPageActionCreator(currPage))\n        },\n        toggleIsFetching: (isFetching) => {\n            dispatch(toggleIsFetchingActionCreator(isFetching))\n        }\n    }\n}\n*/\n\n\n//\n// let authRedirectComponent = withAuthRedirect(FindFriendContainer);\n//\n// const findFriendsWithRouter = withRouter(authRedirectComponent);\n//\n// const FindFriendsContainer = connect(mapStateToProps,\n//     {\n//         toggleFriend,\n//         setUsers,\n//         setUsersCount,\n//         setTotalCount,\n//         setCurrentPage,\n//         toggleIsFetching,\n//         toggleAddingFriend,\n//         toggleWhichFriendIsAdding,\n//         getUsers,\n//         getAdditionalUsers,\n//         postAddFriend,\n//         deleteFriend\n//     })(findFriendsWithRouter)\n\nexport default compose(\n    connector,\n    withAuthRedirect,\n    withGlobalMessage)(FindFriendsContainer);","import './NetworkContact.scss'\n\nconst NetworkContact = (props) => {\n    if(!props.link){\n        return null;\n    }\n    let link = props.link.startsWith('https://') || props.link.startsWith('http://') ? props.link : `https://${props.link}`;\n    let icon;\n    let mod = `--${props.type}`;\n    if(props.link){\n        switch (props.type) {\n            case \"facebook\":\n                icon = <i className=\"fab fa-facebook\"/>;\n                break;\n            case \"website\":\n                icon = <i className=\"fas fa-project-diagram\"/>;\n                break;\n            case \"vk\":\n                icon = <i className=\"fab fa-vk\"/>;\n                break;\n            case \"twitter\":\n                icon = <i className=\"fab fa-twitter\"/>;\n                break;\n            case \"instagram\":\n                icon = <i className=\"fab fa-instagram\"/>;\n                break;\n            case \"youtube\":\n                icon = <i className=\"fab fa-youtube\"/>;\n                break;\n            case \"github\":\n                icon = <i className=\"fab fa-github\"/>;\n                break;\n            case \"mainLink\":\n                icon = <i className=\"fas fa-home\"/>;\n                break;\n            default:\n                break;\n        }\n    }\n    return(\n        <a href={link} className={`network-contact network-contact${mod}`} target=\"_blank\">\n            {icon}\n        </a>\n    )\n}\n\nexport default NetworkContact;","export default __webpack_public_path__ + \"static/media/currDefProfileBg.2319ce56.png\";","import './ProfileStatus.scss';\nimport React, {FC, useRef, useState} from \"react\";\n\ntype ProfileStatusPropsType = {\n    statusEditable: boolean\n    userStatus: string\n    putUserStatus: Function\n}\n\nconst ProfileStatus: FC<ProfileStatusPropsType> = (props) => {\n    let [isStatusEditing, toggleStatusEditing] = useState(false);\n    let [localStatus, setLocalStatus] = useState('');\n    let statusInputBoxRef = useRef<HTMLDivElement>(null);\n    const putUserStatusAndToggleStatusEditing = () => {\n        if(props.userStatus !== localStatus){\n            props.putUserStatus(localStatus);\n        }\n        toggleStatusEditing(false);\n    }\n    // useOutsideAlerter(statusInputBoxRef, putUserStatusAndToggleStatusEditing);\n\n    const submitStatusChanges = () => {\n        putUserStatusAndToggleStatusEditing();\n    }\n    const editStatusOnClick = () => {\n        setLocalStatus(props.userStatus);\n        toggleStatusEditing(true);\n    }\n    return (\n        <>\n            {props.statusEditable &&\n            <div className=\"profile-status__status-box\" ref={statusInputBoxRef}>\n                {isStatusEditing\n                    ? <>\n                        <input autoFocus type={\"text\"} className=\"profile-status__status-input\"\n                               onChange={(e) => setLocalStatus(e.target.value)}\n                               value={localStatus}\n                               onKeyDown={(e) => {\n                                   if(e.key === 'Enter') submitStatusChanges();\n                               }}\n                        />\n                        <button className=\"profile-status__status-btn\" onClick={submitStatusChanges}>\n                            <i className=\"fas fa-check-circle\"/>\n                        </button>\n                    </>\n                    : <>\n                        <p className=\"profile-status__status\"\n                           onDoubleClick={editStatusOnClick}\n                           title={props.userStatus}\n                        >\n                            {props.userStatus ? props.userStatus : 'Your Status'}\n                        </p>\n                        <button className=\"profile-status__status-btn\" onClick={editStatusOnClick}>\n                            <i className=\"far fa-edit\" />\n                        </button>\n                    </>\n                }\n            </div>\n            }\n            {!props.statusEditable &&\n            <p className='profile-status__status' title={props.userStatus}>{props.userStatus}</p>\n            }\n        </>\n    )\n}\n\nexport default ProfileStatus;","import './ProfileHeader.scss';\nimport NetworkContact from \"../../SharedComponents/NetworkContact/NetworkContact\";\nimport defBgImg from '../../../assets/images/currDefProfileBg.png'\nimport defAvaImg from '../../../assets/images/defaultAvatar.png';\nimport React, {FC} from 'react';\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\nimport {UserProfileContactsType} from \"../../../types/types\";\n\ntype ProfileHeaderPropsType = {\n    background: string | null\n    avatar: string | null\n    name: string\n    userStatus: string\n    contacts: UserProfileContactsType\n    statusEditable: boolean\n    putUserStatus: Function\n}\n\n\nconst ProfileHeader: FC<ProfileHeaderPropsType> = (props) => {\n    let contactItems = [];\n    for(let c in props.contacts){\n        // @ts-ignore\n        contactItems.push(<NetworkContact link={props.contacts[c]} type={c} key={c}/>)\n    }\n    let backgroundImg = props.background ? props.background : defBgImg;\n    let avatarImg = props.avatar ? props.avatar : defAvaImg;\n\n    return(\n        <div className='profileHeader'>\n           <div className='profileHeader__background'>\n               <img alt='Background' src={backgroundImg} />\n           </div>\n            <div className='profileHeader__menu'>\n                <div className=\"profileHeader__contacts\">\n                    {contactItems}\n                </div>\n            </div>\n            <div className='profileHeader__profile-short profile-short'>\n                <a href='#'>\n                    <img src={avatarImg} alt='avatar'/>\n                </a>\n                <a href='#'><p className='profile-short__name'>{props.name}</p></a>\n                <ProfileStatus\n                    statusEditable={props.statusEditable}\n                    userStatus={props.userStatus}\n                    putUserStatus={props.putUserStatus}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileHeader;","import './IntroItem.scss'\n\nconst IntroItem = (props) => {\n    return(\n        <div className='intro-box__item'>\n            <h4>{props.title}:</h4>\n            <p>{props.text}</p>\n        </div>\n    )\n}\n\nexport default IntroItem;","import './ProfileIntro.scss'\nimport IntroItem from \"./IntroItem/IntroItem\";\n\nconst ProfileIntro = ({fullName, lookingForAJob, lookingForAJobDesc, aboutMe}) => {\n    return(\n        <div className='profileIntro'>\n            <div className='profileIntro__title-box'>\n                <h2 className='profileIntro__title'>Profile Intro</h2>\n            </div>\n            <div className='profileIntro__box intro-box'>\n                {fullName && <IntroItem title={'Name'} text={fullName}/>}\n                {aboutMe && <IntroItem title='About Me' text={aboutMe}/>}\n                {lookingForAJob &&  <IntroItem title='Job preferences' text={lookingForAJobDesc}/>}\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileIntro;","import './Post.scss';\n\nconst Post = (props) => {\n    return(\n        <div className='post'>\n            <div className='post__header'>\n                <a href={props.profileLink}>\n                    <img alt='profile' src={props.profileImage} />\n                </a>\n                <a href={props.profileLink}>\n                    <span>{props.name}</span>\n                </a>\n            </div>\n            <div className='post__inner'>\n                <p>{props.text}</p>\n            </div>\n            <div className='post__footer'>\n                <div className='post__mark'>\n                    <button><i className=\"far fa-heart\"></i></button>\n                    <span className='post__mark'>{props.likesCount}</span>\n                </div>\n                <div className='post__mark'>\n                    <button><i className=\"far fa-comments\"></i></button>\n                    <span className='post__comments-count'>{props.commentsCount}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import './ProfilePosts.scss';\nimport Post from \"./Post/Post\";\nimport Button from \"../../SharedComponents/Button\";\nimport React from \"react\";\n\nconst ProfilePosts = (props) => {\n    let fulledPosts = props.posts.map(el=>(\n            <Post profileLink={el.profileLink}\n              name={el.name}\n              profileImage={el.profileImage}\n              text={el.text}\n              likesCount={el.likesCount}\n              commentsCount={el.commentsCount}\n            />\n        ))\n    let textAreaEl = React.createRef();\n    const addPost = () =>{\n        props.addPost()\n    }\n    const textAreaOnChange = () => {\n        props.textAreaOnChange(textAreaEl.current.value)\n    }\n    //buttons goes away when clicked\n    // const textAreaOnFocus = () => {\n    //   textAreaEl.current.classList.add('profile-posts__input--is-focused')\n    // }\n    // const textAreaOnBlur = (e) => {\n    //     console.log(e.target.className)\n    //     if(!e.target.className.includes('profile-posts__input-textarea') && e.target.tagName !== 'BUTTON') {\n    //         textAreaEl.current.classList.remove('profile-posts__input--is-focused')\n    //     }\n    // }\n    return(\n        <div className='profile-posts'>\n            <div className='profile-posts__input'>\n                <textarea className='profile-posts__input-textarea' onChange={textAreaOnChange} value={props.postsInputValue} placeholder='Write your post...' ref={textAreaEl}/>\n                <div onClick={addPost}>\n                    <Button inner='Post' />\n                </div>\n\n            </div>\n            {fulledPosts}\n        </div>\n    )\n}\n\nexport default ProfilePosts;","import ProfilePosts from \"../components/Profile/ProfilePosts/ProfilePosts\";\nimport {addPost} from \"../reducers/profile\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n    return{\n        posts: state.profile.posts\n    }\n}\n\nconst ProfilePostsContainer = connect(mapStateToProps, {\n    addPost\n})(ProfilePosts)\n\nexport default ProfilePostsContainer;","import './Preloader.css'\n\nconst Preloader = () => {\n    return(\n        <main className='preloader__box'>\n            <div className=\"preloader\">\n                <div className=\"preloader__square\"></div>\n                <div className=\"preloader__square\"></div>\n                <div className=\"preloader__square\"></div>\n                <div className=\"preloader__square\"></div>\n            </div>\n            <div className=\"status\">Loading<span className=\"status__dot\">.</span><span\n                className=\"status__dot\">.</span><span className=\"status__dot\">.</span></div>\n        </main>\n    )\n}\n\nexport default Preloader;","import './Profile.scss'\nimport ProfileHeader from \"./ProfileHeader/ProfileHeader\";\nimport ProfileIntro from \"./ProfileIntro/ProfileIntro\";\nimport ProfilePostsContainer from \"../../containers/ProfilePostsContainer\";\nimport Preloader from \"../SharedComponents/Preloader/Preloader\";\nimport React, {FC} from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {ProfilePropsType} from \"../../containers/ProfileContainer\";\n\ntype RouteParams = {\n    userId: string\n}\nconst Profile: FC<ProfilePropsType> = (props) => {\n    const {userId} = useParams<RouteParams>();\n    if(!props.profile || props.isGettingProfileData || (+userId !== props.profile?.userId && userId)){\n        return <div className='profile'><div className='profile__preloader-box>'> <Preloader /> </div></div>;\n    }\n    return(\n        <main className='profile'>\n            <div className='profile__box'>\n                <ProfileHeader\n                    background={props.profile.photos.large}\n                    avatar={props.profile.photos.small}\n                    name={props.profile.fullName}\n                    userStatus={props.userStatus}\n                    contacts={props.profile.contacts}\n                    statusEditable={props.profile.userId === props.authUserProfile?.userId}\n                    putUserStatus={props.putUserStatus}\n                />\n                <section className='profile__columns'>\n                    <div className='profile__col1'>\n                        <ProfileIntro fullName={props.profile.fullName}\n                                      aboutMe={props.profile.aboutMe}\n                                      lookingForAJob={props.profile.lookingForAJob}\n                                      lookingForAJobDesc={props.profile.lookingForAJobDescription}\n                        />\n                    </div>\n                    <div className='profile__col2'>\n                        <ProfilePostsContainer />\n                    </div>\n                    <div className='profile__col3'>\n\n                    </div>\n                </section>\n            </div>\n        </main>\n    )\n}\nexport default Profile;","import React, {FC, useEffect} from 'react';\nimport Profile from \"../components/Profile/Profile\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {\n    initUserProfileWithDataInMemory,\n    initUserProfileWithoutDataInMemory,\n    putUserStatus\n} from \"../reducers/profile\";\nimport {useParams} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {withGlobalMessage} from \"../hoc/withGlobalMessage\";\nimport {RootState} from \"../redux/reduxStore\";\n\ntype RouteParams = {\n    userId: string\n}\nexport const ProfileContainer: FC<ProfilePropsType> = (props) => {\n    const userId = +useParams<RouteParams>().userId;\n    useEffect(() => {\n        window.scrollTo( 0, 0 );\n        if(userId !== props.profile?.userId || !userId){\n            if(JSON.stringify(props.authUserProfile) !== JSON.stringify(props.profile) || props.authUserStatus !== props.userStatus){\n                if(props.authUserProfile && !props.isGettingProfileData){\n                    props.initUserProfileWithDataInMemory(props.authUserProfile, props.authUserStatus);\n                }\n            }\n            if(userId){\n                props.initUserProfileWithoutDataInMemory(userId);\n            }\n        }\n    }, [userId, props.authUserProfile, props.authUserStatus])\n\n    return(\n            <Profile {...props}/>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    profile: state.profile.userProfile,\n    userStatus: state.profile.userStatus,\n    authUserProfile: state.auth.authorizedUserProfile,\n    authUserStatus: state.auth.authUserStatus,\n    authUserId: state.auth.authorizedUserProfile?.userId,\n    isAuth: state.auth.isAuth,\n    isGettingProfileData: state.profile.isGettingProfileData\n})\nconst connector = connect(mapStateToProps,{\n        initUserProfileWithDataInMemory,\n        initUserProfileWithoutDataInMemory,\n        putUserStatus\n    });\nexport type ProfilePropsType = ConnectedProps<typeof connector>;\n\nexport default compose(\n    connector,\n    withAuthRedirect,\n    withGlobalMessage\n)(ProfileContainer);","import './SearchPanel.scss';\n\nconst SearchPanel = (props) => {\n    return(\n        <div className='search-panel'>\n            <input type=\"text\" className=\"search-panel__input\" placeholder='Search here users or pages...'/>\n            <button className='search-panel__search-button'>\n                <i className=\"fas fa-search \" />\n            </button>\n        </div>\n    )\n}\n\nexport default SearchPanel;","import './UserLoginItem.scss'\nimport defAvatar from '../../../assets/images/defaultAvatar.png'\nimport {NavLink} from \"react-router-dom\";\nimport {useEffect, useRef, useState} from \"react\";\nimport {useOutsideAlerter} from \"../../SharedComponents/sharedFunc\";\n\n\nconst UserLoginItem = (props) => {\n    let [isOptionMenuOpened, toggleOptionMenu] = useState(false);\n    let optionsMenuRef = useRef(null);\n    useOutsideAlerter(optionsMenuRef, toggleOptionMenu);\n    useEffect(() => {\n        toggleOptionMenu(false);\n    }, [props.isAuth])\n    if(!props.isAuth){\n        return(\n            <div className=\"user-not-auth\">\n                <NavLink to='/login' className=\"user-not-auth__sign-in\">Sign In</NavLink>\n                <NavLink to='#' className=\"user-not-auth__sign-up\">Sign Up</NavLink>\n            </div>\n        )\n    }\n    const optionsMenu =(\n        <div className='user-login-item__options-menu' >\n            <ul>\n                <li><NavLink to='#' onClick={() => props.unAuthorize()}>Log Out</NavLink></li>\n            </ul>\n        </div>)\n    const showLoginItemOptions = () => {\n            toggleOptionMenu(!isOptionMenuOpened)\n    }\n    return(\n        <div className=\"user-login-item\" ref={optionsMenuRef}>\n            <NavLink to={'/profile'}>\n                <img src={props.avatar ? props.avatar : defAvatar} alt=\"Authorized User Img\" className=\"user-login-item__avatar\"/>\n            </NavLink>\n            <div className=\"user-login-item__info\">\n                <p className=\"user-login-item__login\">\n                    {props.login}\n                </p>\n                <div\n                    className={\n                        !isOptionMenuOpened\n                        ? 'user-login-item__arrow-box'\n                        : 'user-login-item__arrow-box user-login-item__arrow-box--opened'\n                    }\n                    onClick={showLoginItemOptions}>\n                    <span/>\n                    <span/>\n                </div>\n            </div>\n            {isOptionMenuOpened ? optionsMenu : null}\n        </div>\n    )\n\n}\n\nexport default UserLoginItem;","import './Header.scss'\nimport SearchPanel from \"./SearchPanel/SearchPanel\";\nimport {NavLink} from \"react-router-dom\";\nimport UserLoginItem from \"./UserLoginItem/UserLoginItem\";\n\nconst Header = (props) => {\n    const controllersForAuthUser = () => {\n        if(props.isAuth){\n            return(\n                <>\n                    <h1 className='header__title'><span>Some Page</span></h1>\n                    <SearchPanel />\n                    <NavLink to='/users' className='header__find-friends-btn'><span>Find Friends</span></NavLink>\n                </>)\n        }\n    }\n    return(\n\n        <header className='header'>\n            <div className='header__logo-wrapper'>\n                <i className='fas fa-project-diagram header__logo'></i>\n            </div>\n            {controllersForAuthUser()}\n            <div className='header__user-login-box'>\n                <UserLoginItem\n                    isAuth={props.isAuth}\n                    login={props.login}\n                    avatar={props.profile?.photos.small}\n                    unAuthorize={props.unAuthorize}\n                />\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport Header from \"../components/Header/Header\";\nimport {\n    unAuthorize\n} from \"../reducers/auth\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {RootState} from \"../redux/reduxStore\";\n\nclass HeaderContainer extends React.Component<HeaderPropsType>{\n    render() {\n        return <Header {...this.props}/>\n    }\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return{\n        isAuth: state.auth.isAuth,\n        userId: state.auth.id,\n        login: state.auth.login,\n        profile: state.auth.authorizedUserProfile,\n    }\n}\nconst connector = connect(mapStateToProps, { unAuthorize });\nexport type HeaderPropsType = ConnectedProps<typeof connector>;\n\nexport default connector(HeaderContainer);","import './InputCheckbox.scss';\n\nconst InputCheckbox = ({id, label, isChecked, onChange}) => {\n    return(\n        <div className=\"custom-checkbox\">\n            <label htmlFor={id} className=\"custom-checkbox__label-text\">{label}</label>\n            <input type=\"checkbox\" id={id} onChange={onChange} defaultChecked={isChecked}/>\n                <label htmlFor={id} className=\"custom-checkbox__label\">\n                    <div className=\"custom-checkbox__ball\"/>\n                </label>\n        </div>\n    )\n}\n\nexport default InputCheckbox;","import './Textarea.scss'\n\n\nconst Textarea = ({id, label='', value='', placeholder='', onChange, minHeight='', maxHeight='', width='', disabled=false, error=''}) => {\n    return (\n        <div className={'textarea__box'}>\n            <label htmlFor={id} className={'textarea__label'}>{label}</label>\n            <textarea  id={id}\n                       onChange={onChange}\n                       className={'textarea__textarea'}\n                       placeholder={placeholder}\n                       disabled={disabled}\n                       defaultValue={value}/>\n            <span className={'textarea__error'}>{error}</span>\n            <style\n                type={'text/css'}>{\n                    `#${id}{\n                        min-height: ${minHeight};\n                        max-height: ${maxHeight};\n                        width: ${width};\n                    }`\n                }</style>\n        </div>\n    )\n}\n\nexport default Textarea;","import './ProfileSettings.scss';\nimport React, {useState} from \"react\";\nimport Button from \"../../SharedComponents/Button\";\nimport defAvatar from '../../../assets/images/defaultAvatar.png';\nimport { Formik } from 'formik';\nimport InputText from \"../../SharedComponents/InputText/InputText\";\nimport InputCheckbox from \"../../SharedComponents/InputCheckbox/InputCheckbox\";\nimport Textarea from \"../../SharedComponents/Textarea/Textarea\";\nimport * as Yup from \"yup\";\nimport lodash from \"lodash\";\n\nconst ProfileSettings = ({profile, authUserId, photo, putNewUserPhotoAndRefreshProfileState,refreshAuthUserProfileData, setGlobalMessage}) => {\n    let [file, setFile] = useState(null);\n    let [fileURL, setFileURL] = useState('')\n    const imgForPreview = photo ? photo : defAvatar;\n    const onFileChange = (event) => {\n        setFile(event.target.files[0]);\n        setFileURL(URL.createObjectURL(event.target.files[0]));\n    }\n\n    const onFileUpload = () => {\n        const formData = new FormData();\n        formData.append(\n            \"image\",\n            file,\n            file.name\n        );\n        putNewUserPhotoAndRefreshProfileState(formData, authUserId)\n    }\n    return(\n        <div className=\"profile-settings\">\n            <div>\n                <img src={fileURL ? fileURL : imgForPreview} alt=\"\" className=\"profile-settings__img-preview\" />\n                <div className=\"profile-settings__set-img-controllers\">\n                    <label htmlFor='profile-settings__img-input' className=\"profile-settings__img-input-label\">Browse...</label>\n                    <input className=\"profile-settings__img-input\" id='profile-settings__img-input' type=\"file\" onChange={onFileChange} />\n                    <div className=\"profile-settings__set-img-button\" onClick={onFileUpload}>\n                        <Button inner='Set Image' disabled={!file}/>\n                    </div>\n                </div>\n            </div>\n            <ProfileSettingsForm profile={profile}\n                                 refreshAuthUserProfileData={refreshAuthUserProfileData}\n                                 setGlobalMessage={setGlobalMessage}\n            />\n        </div>\n    )\n}\n\nconst ProfileSettingsForm = ({profile, refreshAuthUserProfileData, setGlobalMessage}) => {\n    let [isLookingForAJob, setIsLookingForAJob] = useState(profile.lookingForAJob);\n    let [isFetching, setIsFetching] = useState(false);\n    let contactsValidationMapped = {};\n    let contactsKeys = Object.keys(profile.contacts);\n    for(let c = 0; c < contactsKeys.length; c++){\n        contactsValidationMapped[contactsKeys[c]] = Yup.string().nullable().url('Must be in URL format');\n    }\n    const profileSettingsFormValidationSchema = Yup.object({\n        fullName: Yup.string().min(2, 'Name must have more than 2 characters')\n            .max(50, '50 characters limit').required('Required').trim(),\n        lookingForAJobDescription: Yup.string().nullable().max(200, '200 characters limit').trim(),\n        aboutMe: Yup.string().nullable().max(200, '200 characters limit').trim(),\n        contacts: Yup.object(contactsValidationMapped)\n    });\n    const initialValues = {\n        fullName: profile.fullName,\n        aboutMe: profile.aboutMe,\n        lookingForAJob: profile.lookingForAJob,\n        lookingForAJobDescription: profile.lookingForAJobDescription,\n        contacts: {\n            github: profile.contacts.github,\n            vk: profile.contacts.vk,\n            facebook: profile.contacts.facebook,\n            instagram: profile.contacts.instagram,\n            twitter: profile.contacts.twitter,\n            website: profile.contacts.website,\n            youtube: profile.contacts.youtube,\n            mainLink: profile.contacts.mainLink\n        }\n    }\n    return(\n        <Formik\n            initialValues={initialValues}\n            validationSchema={profileSettingsFormValidationSchema}\n            onSubmit={(values)=>{\n                if(!lodash.isEqual(initialValues, values)){\n                    setIsFetching(true);\n                    refreshAuthUserProfileData(values)\n                        .then(() => {\n                            setIsFetching(false);\n                        })\n                }else{\n                    setGlobalMessage({message: 'No changes detected', isSuccess: false});\n                }\n            }}\n        >\n            {\n                formik => (\n                    <form className={'profile-settings__form'} onSubmit={formik.handleSubmit}>\n                        <InputText\n                               id={'fullName'}\n                               label={'Full Name'}\n                               value={profile.fullName}\n                               width={'100%'}\n                               onChange={formik.handleChange}\n                               error={formik.errors.fullName}\n                        />\n                        <Textarea\n                            id={'aboutMe'}\n                            label={'About Me'}\n                            minHeight={'80px'}\n                            maxHeight={'100px'}\n                            width={'100%'}\n                            value={profile.aboutMe}\n                            onChange={formik.handleChange}\n                            error={formik.errors.aboutMeInput}\n                        />\n                        <InputCheckbox\n                               id={'lookingForAJob'}\n                               isChecked={profile.lookingForAJob}\n                               onChange={(e) => {\n                                   formik.handleChange(e);\n                                   setIsLookingForAJob(!isLookingForAJob);\n                               }}\n                               label={'Are you looking for a job?'}\n                        />\n                        <Textarea\n                            id={'lookingForAJobDescription'}\n                            label={'Description of the desired job'}\n                            disabled={!isLookingForAJob}\n                            minHeight={'80px'}\n                            maxHeight={'100px'}\n                            width={'100%'}\n                            value={profile.lookingForAJobDescription}\n                            onChange={formik.handleChange}\n                            error={formik.errors.lookingForAJobDescription}\n                        />\n                        {\n                            Object.keys(profile.contacts).map((key) => {\n                                let contact = profile.contacts[key] ? profile.contacts[key] : '';\n                                return(<InputText\n                                        id={key}\n                                        name={`contacts.${key}`}\n                                        label={key.charAt(0).toUpperCase() + key.slice(1)}\n                                        value={contact}\n                                        maxLength={150}\n                                        minLength={5}\n                                        width={'100%'}\n                                        onChange={formik.handleChange}\n                                        error={formik.errors.contacts ? formik.errors.contacts[key] : ''}\n                                        key={key}\n                                />)\n                            })\n                        }\n                        <Button inner=\"Submit\" type=\"submit\" isFetching={isFetching} fetchingMessage={'Sending...'} disabled={isFetching}/>\n                    </form>\n                )\n            }\n        </Formik>\n    )\n}\n\nexport default ProfileSettings;","import './Settings.scss'\nimport {NavLink, Route} from \"react-router-dom\";\nimport ProfileSettings from \"./ProfileSettings/ProfileSettings\";\n\nconst Settings = (props) => {\n    return(\n        <div className='settings'>\n            <div className=\"settings__box\">\n                <div className=\"settings__col1\">\n                    <ul className='settings__nav settings-nav'>\n                        <li className='settings-nav__header'>Account Settings</li>\n                        <NavLink to='/settings/profile'><li className='settings-nav__item'>Profile</li></NavLink>\n                    </ul>\n                </div>\n                <div className=\"settings__col2\">\n                    <Route path='/settings/profile' render={() =>\n                        <ProfileSettings\n                            photo={props.photo}\n                            profile={props.profile}\n                            authUserId={props.authUserId}\n                            setGlobalMessage={props.setGlobalMessage}\n                            putNewUserPhotoAndRefreshProfileState={props.putNewUserPhotoAndRefreshProfileState}\n                            refreshAuthUserProfileData={props.refreshAuthUserProfileData}\n                        />}\n                    />\n                </div>\n                <div className=\"settings__col3\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Settings;","import {connect, ConnectedProps} from \"react-redux\";\nimport Settings from \"../components/Settings/Settings\";\nimport {putNewUserPhotoAndRefreshProfileState, refreshAuthUserProfileData, setAuthUserProfile} from \"../reducers/auth\";\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {setGlobalMessage} from \"../reducers/app\";\nimport {withGlobalMessage} from \"../hoc/withGlobalMessage\";\nimport {FC} from \"react\";\nimport {RootState} from \"../redux/reduxStore\";\n\nconst SettingsContainer: FC<SettingsPropsType> = (props) => {\n    return(\n        <Settings {...props} />\n    )\n}\nconst mapStateToProps = (state: RootState) => ({\n    photo: state.auth.authorizedUserProfile?.photos.small,\n    profile: state.auth.authorizedUserProfile,\n    authUserId: state.auth.id,\n})\nconst connector = connect(mapStateToProps, {\n    setAuthUserProfile,\n    setGlobalMessage,\n    putNewUserPhotoAndRefreshProfileState,\n    refreshAuthUserProfileData\n});\ntype SettingsPropsType = ConnectedProps<typeof connector>;\n\nexport default compose(\n    connector,\n    withAuthRedirect,\n    withGlobalMessage\n)(SettingsContainer);","import './GlobalMessage.scss';\n\nconst GlobalMessage = ({message, removeMessageFunc, isSuccess}) => {\n    return(\n        <div className=\"global-message\">\n            <div className=\"global-message__box\">\n                <span className=\"global-message__message\">{message}</span>\n                <button className=\"global-message__btn-close\" type={\"button\"} onClick={() => removeMessageFunc()}/>\n            </div>\n            {isSuccess ? <style type={\"text/css\"}>{`.global-message{\n                background-color: #b9ffb9;\n            }`}</style> : null}\n        </div>\n    )\n}\n\nexport default GlobalMessage;","import {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport './App.scss';\nimport React, {useEffect} from 'react';\nimport store, {RootState} from \"./redux/reduxStore\";\nimport {connect, Provider} from \"react-redux\";\nimport Nav from \"./components/Nav/Nav\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport RightSideBar from \"./components/RightSideBar/RightSideBar\";\nimport FindFriendsContainer from \"./containers/FindFriendsContainer\";\nimport ProfileContainer from \"./containers/ProfileContainer\";\nimport HeaderContainer from \"./containers/HeaderContainer\";\nimport SettingsContainer from \"./containers/SettingsContainer\";\nimport Preloader from \"./components/SharedComponents/Preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {getAuthUserDataAndGetSetAuthUserProfileData} from \"./reducers/auth\";\nimport {useAppReducerDispatch, useAppState} from \"./reducers/app\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport GlobalMessage from \"./components/SharedComponents/GlobalMessage/GlobalMessage\";\n\nconst LoginContainer = React.lazy((): Promise<{ default: any }> => import(\"./containers/LoginContainer\"));\n\nconst App = (props: {state: RootState, getAuthUserDataAndGetSetAuthUserProfileData: Function}) => {\n    const { initialized, globalMessage } = useAppState();\n    const { toggleInitialized, removeGlobalMessage } = useAppReducerDispatch();\n    const globalMessageArray = globalMessage.length\n        ? globalMessage\n        : null;\n    useEffect(() => {\n        props.getAuthUserDataAndGetSetAuthUserProfileData()\n            .then(() => {\n                toggleInitialized(true);\n            })\n    }, [])\n    if(!initialized){\n        return (\n            <div className='app-wrapper'>\n                <div className=\"main-wrapper main\">\n                    <Preloader />\n                </div>\n            </div>\n        )\n    }\n    let dialogsComponent = () => <Dialogs state={props.state}/>;\n    // @ts-ignore\n    let profileContainerComponent = () => <ProfileContainer />;\n    // @ts-ignore\n    let findFriendsContainerComponent = () => <FindFriendsContainer />;\n    // @ts-ignore\n    let settingsContainerComponent = () => <SettingsContainer />;\n\n    return (\n      <BrowserRouter>\n        <div className='app-wrapper'>\n            <HeaderContainer />\n            <Nav isAuth={props.state.auth.isAuth}/>\n            <div className=\"main-wrapper main\">\n                {globalMessageArray\n                    ? <GlobalMessage message={globalMessageArray[globalMessageArray.length - 1]?.message}\n                                     isSuccess={globalMessageArray[globalMessageArray.length - 1]?.isSuccess}\n                                     removeMessageFunc={removeGlobalMessage}/>\n                    : null}\n                <Switch>\n                    <Route path='/profile/:userId?'\n                           render={profileContainerComponent}/>\n\n                    <Redirect exact from='/' to='/profile' />\n\n                    <Route path='/profile'\n                           render={profileContainerComponent}/>\n\n                    <Route path='/dialogs'\n                           render={dialogsComponent}/>\n\n                    <Route path='/news'\n                           component={News}/>\n\n                    <Route path='/music'\n                           component={Music}/>\n\n                    <Route path='/settings'\n                           render={settingsContainerComponent}/>\n\n                    <Route path='/users'\n                           render={findFriendsContainerComponent} />\n\n                    <Route path='/login'\n                           render={withSuspense(LoginContainer)} />\n\n                </Switch>\n            </div>\n            <RightSideBar data={props.state.rightSideBar} isAuth={props.state.auth.isAuth}/>\n        </div>\n      </BrowserRouter>\n    );\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    state: state,\n});\n\nlet AppContainer = compose(\n    connect(mapStateToProps,{ getAuthUserDataAndGetSetAuthUserProfileData }),\n)(App);\n\nconst SocialNetworkApp = () => {\n    return(\n        <React.StrictMode>\n            <Provider store={store}>\n                <AppContainer />\n            </Provider>\n        </React.StrictMode>\n    )\n}\n\nexport default SocialNetworkApp;\n","import React from 'react';\nimport Preloader from \"../components/SharedComponents/Preloader/Preloader\";\n\nexport const withSuspense = (Component) => {\n    return (props) => {\n        return(\n            <React.Suspense fallback={<Preloader/>}>\n                <Component {...props}/>\n            </React.Suspense>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/reduxStore\";\nimport SocialNetworkApp from \"./App\";\n\nexport const rerenderEntireTree = (store) =>{\n    ReactDOM.render(<SocialNetworkApp />, document.getElementById('root')\n    );\n}\nrerenderEntireTree(store);\nstore.subscribe(() => {\n    rerenderEntireTree(store);\n});\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import './Button.scss'\nimport {FC} from \"react\";\n\ntype ButtonProps = {\n    type?: 'submit' | 'reset' | 'button'\n    inner: string\n    disabled?: boolean\n    isFetching?: boolean\n    fetchingMessage?: string\n}\n\nconst Button: FC<ButtonProps> = ({type, inner, disabled, isFetching, fetchingMessage}) => {\n    return(\n        <button\n            className={disabled ? 'commonButton commonButton--disabled' :  'commonButton'}\n            type={type ? type : 'button'}\n        >{isFetching !== undefined\n            ? isFetching\n                ? fetchingMessage\n                : inner\n            : inner\n        }</button>\n    )\n}\n\nexport default Button;","import {ProfileAPI, ResultCodes} from \"../api/api\";\nimport {setGlobalMessage} from \"./app\";\nimport {AppThunk} from \"../redux/reduxStore\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {ProfilePostType, UserProfileType} from \"../types/types\";\n\n// const SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\n// const TOGGLE_IS_GETTING_PROFILE_DATA = 'profile/TOGGLE_IS_GETTING_PROFILE_DATA';\n// //-- posts\n// const ADD_POST = 'profile/ADD_POST';\n// const UPDATE_NEW_POST_TEXT = 'profile/UPDATE_NEW_POST_TEXT';\n// const SET_USER_STATUS = 'profile/SET_USER_STATUS';\n\n\n\nconst initialState = {\n    title: 'Profile',\n    userProfile: null as UserProfileType | null,\n    userStatus: '',\n    isGettingProfileData: false,\n    posts: [\n        {\n            id: 1,\n            profileLink: '#',\n            name: 'Philip',\n            profileImage: 'https://s3.cdn.teleprogramma.pro/wp-content/uploads/2020/01/a76ebd11ecf1ab90a360b056f49b90a0.jpg',\n            text: 'My 1st post, guys!',\n            likesCount: 17,\n            commentsCount: 1,\n        },\n        {\n            id: 2,\n            profileLink: '#',\n            name: 'Philip',\n            profileImage: 'https://s3.cdn.teleprogramma.pro/wp-content/uploads/2020/01/a76ebd11ecf1ab90a360b056f49b90a0.jpg',\n            text: 'My 1st post, guys!',\n            likesCount: 17,\n            commentsCount: 1,\n        },\n        {\n            id: 3,\n            profileLink: '#',\n            name: 'Philip',\n            profileImage: 'https://s3.cdn.teleprogramma.pro/wp-content/uploads/2020/01/a76ebd11ecf1ab90a360b056f49b90a0.jpg',\n            text: 'My 1st post, guys!',\n            likesCount: 17,\n            commentsCount: 1,\n        },\n    ] as Array<ProfilePostType>,\n};\n// type ProfileInitialStateType = typeof initialState;\n\n// const profileReducer = (state = initialState, action: ActionTypes): ProfileInitialStateType => {\n//     switch (action.type){\n//         case ADD_POST:\n//             return {\n//                 ...state,\n//                 posts: [...state.posts, {\n//                     id: state.posts.length + 1,\n//                     profileLink: '#',\n//                     name: action.name,\n//                     profileImage: 'https://s3.cdn.teleprogramma.pro/wp-content/uploads/2020/01/a76ebd11ecf1ab90a360b056f49b90a0.jpg',\n//                     text: state.postsInputValue,\n//                     likesCount: 0,\n//                     commentsCount: 0,\n//                 }],\n//                 postsInputValue: ''\n//             };\n//         case UPDATE_NEW_POST_TEXT:\n//             return {\n//                 ...state,\n//                 postsInputValue: action.text\n//             };\n//         case SET_USER_PROFILE:\n//             return {\n//                 ...state,\n//                 userProfile: action.profile\n//             }\n//         case SET_USER_STATUS:\n//             return {\n//                 ...state,\n//                 userStatus: action.status\n//             }\n//         case TOGGLE_IS_GETTING_PROFILE_DATA:\n//             return{\n//                 ...state,\n//                 isGettingProfileData: action.isGettingProfileData\n//             }\n//         default:\n//             return state;\n//     }\n// }\n// type ActionTypes = AddPostType | UpdateNewPostTextType | SetUserProfileType| SetUserStatusType | ToggleIsGettingProfileDataType |  SetGlobalMessageType;\nconst profileReducer = createSlice({\n    name: 'profile',\n    initialState,\n    reducers: {\n        setUserProfile(state, action: PayloadAction<UserProfileType>) {\n            state.userProfile = action.payload\n        },\n        toggleIsGettingProfileData(state, action: PayloadAction<boolean>) {\n            state.isGettingProfileData = action.payload\n        },\n        setUserStatus(state, action: PayloadAction<string>) {\n            state.userStatus = action.payload\n        },\n        addPost(state, action: PayloadAction<ProfilePostType>) {\n            state.posts.push(action.payload)\n        }\n    }\n})\nexport const { setUserProfile, toggleIsGettingProfileData, setUserStatus, addPost } = profileReducer.actions;\n// type AddPostType = {\n//     type: typeof ADD_POST\n//     name: string\n// }\n// export const addPost = (name: string): AddPostType => ({\n//     type: ADD_POST,\n//     name\n// })\n//\n// type UpdateNewPostTextType = {\n//     type: typeof UPDATE_NEW_POST_TEXT\n//     text: string\n// }\n// export const updateNewPostText = (text: string): UpdateNewPostTextType => ({\n//     type: UPDATE_NEW_POST_TEXT,\n//     text\n// })\n\n// type SetUserProfileType = {\n//     type: typeof SET_USER_PROFILE\n//     profile: UserProfileType | null\n// }\n// export const setUserProfile = (profile: UserProfileType | null): SetUserProfileType => ({\n//     type: SET_USER_PROFILE,\n//     profile\n// })\n//\n// type ToggleIsGettingProfileDataType = {\n//     type: typeof TOGGLE_IS_GETTING_PROFILE_DATA\n//     isGettingProfileData: boolean\n// }\n// export const toggleIsGettingProfileData = (isGettingProfileData: boolean): ToggleIsGettingProfileDataType => ({\n//     type: TOGGLE_IS_GETTING_PROFILE_DATA,\n//     isGettingProfileData\n// })\n//\n// type SetUserStatusType = {\n//     type: typeof SET_USER_STATUS\n//     status: string\n// }\n// export const setUserStatus = (status: string): SetUserStatusType => ({\n//     type: SET_USER_STATUS,\n//     status\n// })\n\nexport const getUserProfileData = (userId: number): AppThunk => async (dispatch) => {\n    const profileData = await ProfileAPI.getUserProfileData(userId);\n    dispatch(setUserProfile(profileData));\n}\n\nexport const getUserStatus = (id: number): AppThunk => async (dispatch) => {\n    try{\n        const data = await ProfileAPI.getUserStatus(id);\n        dispatch(setUserStatus(data));\n    }catch(error: any) {\n        dispatch(setGlobalMessage({message: error, isSuccess: false}))\n    }\n\n}\n\nexport const putUserStatus = (status: string): AppThunk => async (dispatch) => {\n    try{\n        let response = await ProfileAPI.putUserStatus(status);\n        if(response.resultCode === ResultCodes.Success) dispatch(setUserStatus(status));\n    }catch(error: any) {\n        dispatch(setGlobalMessage({message: error, isSuccess: false}))\n    }\n\n}\n\nexport const initUserProfileWithDataInMemory = (profile: UserProfileType, status: string): AppThunk => (dispatch) => {\n    dispatch(toggleIsGettingProfileData(true));\n    dispatch(setUserStatus(status));\n    dispatch(setUserProfile(profile));\n    dispatch(toggleIsGettingProfileData(false));\n}\n\nexport const initUserProfileWithoutDataInMemory = (userId: number):AppThunk => async (dispatch) => {\n    try {\n        dispatch(toggleIsGettingProfileData(true));\n        await Promise.all([dispatch(getUserProfileData(userId)), dispatch(getUserStatus(userId))]);\n        dispatch(toggleIsGettingProfileData(false));\n    }catch (error: any){\n        dispatch(setGlobalMessage({message: error, isSuccess: false}))\n    }\n\n}\n\nexport default profileReducer.reducer;\n","import {connect} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {removeGlobalMessage} from \"../reducers/app\";\n\nexport const withGlobalMessage = (Component) => {\n    const ComponentWithGlobalMessage = (props) => {\n        useEffect(() => {\n            return () => {\n                if(props.globalMessage.length) props.removeGlobalMessage();\n            }\n        },[props.removeGlobalMessage])\n        return <Component {...props}/>\n    }\n\n    return connect((state) => ({globalMessage: state.app.globalMessage}), { removeGlobalMessage })(ComponentWithGlobalMessage);\n}","\nexport const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\n\nconst initialState = {\n    title: 'Dialogs',\n    messageInputValue: '',\n    messages: [\n        {id: 1, message: 'Hey, how a u?', time: '10:00', owner: 'Vasya'},\n        {id: 2, message: 'Hey, how a u, friend?', time: '10:01', owner: 'Vasya'},\n        {id: 3, message: 'Hey, fine', time: '10:03'},\n        {id: 4, message: 'And u?', time: '10:04'},\n        {id: 5, message: 'The same', time: '10:07', owner: 'Vasya'},\n    ],\n    dialogItems: [\n        {\n            id: '1',\n            avatarLink: 'https://s3.cdn.teleprogramma.pro/wp-content/uploads/2020/01/a76ebd11ecf1ab90a360b056f49b90a0.jpg',\n            name: 'Vasya',\n            messageName: 'Vasya',\n            message: 'how a ya bro?'\n        },\n        {\n            id: '2',\n            avatarLink: 'https://s3.cdn.teleprogramma.pro/wp-content/uploads/2020/01/a76ebd11ecf1ab90a360b056f49b90a0.jpg',\n            name: 'Tanya',\n            messageName: 'Tanya',\n            message: 'how a ya ma loveeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee?'\n        },\n        {\n            id: '3',\n            avatarLink: 'https://s3.cdn.teleprogramma.pro/wp-content/uploads/2020/01/a76ebd11ecf1ab90a360b056f49b90a0.jpg',\n            name: 'Dimich',\n            messageName: 'Dimich',\n            message: 'how a ya bro?'\n        },\n    ]\n};\n\nconst dialogsReducer = (state = initialState, action) => {\n    switch (action.type){\n        case SEND_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {\n                    id: state.messages.length + 1,\n                    message: action.message,\n                    time: action.time,\n                    owner: null\n                }],\n                messageInputValue: ''\n            }\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                messageInputValue: action.text\n            };\n        default:\n            return state;\n    }\n}\n\nexport const updateNewMessageTextActionCreator = (text) => ({\n    type: UPDATE_NEW_MESSAGE_TEXT,\n    text: text\n})\nexport const sendMessageActionCreator = (message, time) => ({\n    type: SEND_MESSAGE,\n    message: message,\n    time: time\n})\n\nexport default dialogsReducer;","import './InputText.scss';\n\nconst InputText = ({id, name='', label='', value='', placeholder='', onChange, height='', width='', maxLength='', minLength='', error=''}) => {\n    return (\n        <div className={'input-text'}>\n            <label htmlFor={id} className={'input-text__label'}>{label}</label>\n            <input id={id}\n                   name={name}\n                   onChange={onChange}\n                   className={'input-text__input'}\n                   type={'text'}\n                   placeholder={placeholder}\n                   maxLength={maxLength}\n                   minLength={minLength}\n                   defaultValue={value}/>\n            <span className={'input-text__error'}>{error}</span>\n            <style type={'text/css'}>{\n                `#${id}{\n                    height: ${height};\n                    width: ${width};\n                }`\n            }</style>\n        </div>\n    )\n}\n\nexport default InputText;"],"sourceRoot":""}